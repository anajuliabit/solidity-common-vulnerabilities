* Attack vectors classifications
- O: Out-of-scope
 + We cannot access the source code of the project.
 + Bugs that occur in off-chain components
 + Smart contracts are written in another language
- C01: Mempool Manipulation / Front-Running Vulnerabilities, (e.g sandwich attacks, flash-loan exploits)
- C02: Reentry attack - Reentrancy vulnerabilities happen when external contract calls are made before internal state updates, allowing an adversary to recursively call back into the contract, exploiting the inconsistent state.
- C03: Erroneous state updates.
  + C03-1: Missing state update.
  + C03-2: Incorrect state updates, e.g., a state update that should not be there.
- C04: Hardcoded Setting - refers to the practice of embedding fixed values or parameters directly into the source code of a smart contract. This can pose a security risk if the setting needs to be dynamic or adaptable.
- C05: Privilege escalation and access control issues.
  + C05-3: Privileged functions can be called by anyone or at any time.
  + C05-4: User funds can get locked due to missing/wrong withdraw code
- C06: Wrong Math / Erroneous accounting.
  Wrong Math refers to a potential issue where mathematical operations within a smart contract are implemented incorrectly, leading to inaccurate calculations.
  + C06-1: Incorrect calculating order.
  + C06-2: Returning an unexpected value that deviates from the expected semantics specified for the contract.
  + C06-3: Calculations performed with incorrect numbers (e.g., x = a + b ==> x = a + c, incorrect precisions).
  + C06-4: Other accounting errors (e.g., x = a + b ==> x = a - b).
- C07: Broken business logic
  Logic vulnerabilities involve flaws in the business logic or protocols of a smart contract, where the implementation matches the developer's intention, but the underlying logic is inherently flawed.
  This category includes:
  + C07-1: Unexpected or missing function invocation sequences (e.g., external calls to dependent contracts,  exploitable sequences leading to malicious fund reallocation or manipulation).
  + C07-2: Unexpected environment or contract conditions (e.g., ChainLink returning outdated data or significant slippage occurring).
  + C07-4: Unexpected function arguments.
- C08: Contract implementation-specific bugs. These bugs are difficult to categorize into the above categories.
- C09: Lack of signature replay protection, e.g missing nonce, hash collision
- C010: Missing check.
  Missing Check refers to a critical oversight in a smart contract's code where a necessary condition or validation is not properly implemented.
- C11: lack of segregation between users funds
- C12: Data validation
    Data validation vulnerabilities arise when a smart contract does not adequately verify or sanitize inputs, especially those from untrusted sources. This lack of validation can lead to unintended and potentially harmful consequences within the contractâ€™s operations.
- C13: Whitelist/Blacklist Match
  Whitelist/Blacklist Match refers to a potential vulnerability where a smart contract improperly handles addresses based on predefined lists.
- C14: Arrays
  Vulnerabilities related to arrays can arise when developers do not properly handle array indices or fail to validate user inputs.
   would typically be reserved for vulnerabilities that directly arise from mishandling or misinterpreting arrays in the code. For example, if there were out-of-bound reads/writes, deletion mishaps, or issues with array resizing
- C15: DoS: Denial of Service (DoS) vulnerabilities occur when an attacker can exploit a contract in a way that makes it unresponsive or significantly less efficient. This category includes cases that are not well described by another class and where the primary consequence is contract shut-down or operational inefficiency.
- C16: Grielf Attack: A gas griefing attack happens when a user sends the amount of gas required to execute the target smart contract, but not its sub calls. In most cases, this results in uncontrolled behavior that could have a dangerous impact on the business logic.

* Protocol categories
- Derivatives: Protocols for betting with leverage
- Yield Aggregator: Protocols that aggregated yield from diverse protocols
- DAO: A decentralized autonomous organization (DAO) is an emerging form of legal structure that has no central governing body and whose members share a common goal to act in the best interest of the entity. Popularized through cryptocurrency enthusiasts and blockchain technology, DAOs are used to make decisions in a bottom-up management approach.
- Launchpad: Protocols that launch new projects and coins
- Indexes: Protocols that have a way to track/created the performance of a group of related assets
- Dexes: Protocols where you can swap/trade cryptocurrency
- RWA: Protocols that involve Real World Assets, such as house tokenization
- Algo-Stables: Protocols that provide algorithmic coins to stablecoins
- CDP: Protocols that mint its own stablecoin using collateralized lending
