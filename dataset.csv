Plataforma,Protocolo,Categoria do protocolo,N de auditores,Descrição,Link,Class,Rev
Sherlock,Perennial V2,Derivatives,4,Oracle request timestamp and pending position timestamp mismatch can make most position updates invalid,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/42][Github]],C3-2,
Sherlock,Perennial V2,Derivatives,1,Invalid oracle versions can cause desync of global and local positions making protocol lose funds and being unable to pay back all users,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/49][Github]],C3-2,
Sherlock,Perennial V2,Derivatives,4,Protocol fee from Market.sol is locked,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/52][Github]],C5-4,
Sherlock,Perennial V2,Derivatives,3,"PythOracle:if price.expo is less than 0, wrong prices will be recorded",[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/56][Github]],C6-4,
Sherlock,Perennial V2,Derivatives,4,Vault.sol: settleing the 0 address will disrupt accounting,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/62][Github]],C3-2,
Sherlock,Perennial V2,Derivatives,1,Keepers will suffer significant losses due to miss compensation for L1 rollup fees,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/91][Github]],C7-2,
Sherlock,Blueberry,Yield Agreggator,1,Stable BPT valuation is incorrect and can be exploited to cause protocol insolvency,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/97][Github]],C6-2,1
Sherlock,Blueberry,Yield Agreggator,2,CurveTricryptoOracle incorrectly assumes that WETH is always the last token in the pool which leads to bad LP pricing,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/98][Github]],C8,
Sherlock,Blueberry,Yield Agreggator,2,CurveTricryptoOracle#getPrice contains math error that causes LP to be priced completely wrong,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]],C6-3,1
Sherlock,Blueberry,Yield Agreggator,1,CVX/AURA distribution calculation is incorrect and will lead to loss of rewards at the end of each cliff,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/240][Github]],C6-2,1
Sherlock,Blueberry,Yield Agreggator,1,wrong bToken's exchangeRateStored used for calculate ColleteralValue,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/117][Github]],C6-3,1
Code4Arena,Arbitrum Foundation,DAO,3,Signatures can be replayed in `castVoteWithReasonAndParamsBySig()` to use up more votes than a user intended,[[https://code4rena.com/reports/2023-08-arbitrum][Code4Arena]],C9,1
Code4Arena,PoolTogether,Yield,1,Too many rewards are distributed when a draw is closed,[[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]],C6-3,1
Code4Arena,PoolTogether,Yield,16,rngComplete function should only be called by rngAuctionRelayer,[[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]],C5-3,
Sherlock,Tokensoft,Launchpad,24,"""Votes"" balance can be increased indefinitely in multiple contracts",[[https://github.com/sherlock-audit/2023-06-tokensoft-judging/issues/41][Github]],C5-3,
Sherlock,Bond Options,Options,14,All funds from Teller contract can be drained because a malicious receiver can call reclaim repeatedly,[[https://github.com/sherlock-audit/2023-06-bond-judging/issues/79][Github]],C3-1,1
Sherlock,Bond Options,Options,4,All funds can be stolen from FixedStrikeOptionTeller using a token with malicious decimals,[[https://github.com/sherlock-audit/2023-06-bond-judging/issues/90][Github]],C7-1,
Sherlock,Symmetrical,Derivatives,2,"liquidatePartyA requires signature which doesn't have nonce, making possible unfair liquidation and loss of funds for all parties",[[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/5][Github]],C9,
Sherlock,Symmetrical,Derivatives,2,"liquidatePositionsPartyA limits partyB loss to partyB allocated balance, which can lead to inflated partyB balance and loss of funds",[[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/6][Github]],C3-2,
Sherlock,Cooler,Lending,3,Can steal gOhm by calling Clearinghouse.claimDefaulted on loans not made by Clearinghouse,[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/28][Github]],C10,
Sherlock,Cooler,Lending,10,"At claimDefaulted, the lender may not receive the token because the Unclaimed token is not processed",[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/119][Github]],C3-1,1
Sherlock,Cooler,Lending,2,"Clearinghouse doesn't approve the MINTR to handle tokens in his name, which bricks the entire function.",[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]],C7-1,
Sherlock,Cooler,Lending,20,isCoolerCallback can be bypassed,[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]],C8,
Sherlock,GFX Labs,Dexes,6,Lack of segregation between users' assets and collected fees resulting in loss of funds for the users,[[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/48][Github]],C11,
Sherlock,GFX Labs,Dexes,4,Users' funds could be stolen or locked by malicious or rouge owners,[[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/54][Github]],C12,
Code4Arena,PoolTogether,Yield,2,A malicious user can steal other user's deposits from Vault.sol,[[https://solodit.xyz/issues/h-02-a-malicious-user-can-steal-other-users-deposits-from-vaultsol-code4rena-pooltogether-pooltogether-git][Solodit]],C6-3,1
Code4Arena,PoolTogether,Yield,5,`_amountOut` is representing assets and shares at the same time in the `liquidate` function,[[https://github.com/code-423n4/2023-07-pooltogether-findings/issues/427][Github]],C6-2,
Code4Arena,PoolTogether,Yield,39,`Vault.mintYieldFee` function can be called by anyone to mint `Vault Shares` to any recipient address,[[https://solodit.xyz/issues/h-04-vaultmintyieldfee-function-can-be-called-by-anyone-to-mint-vault-shares-to-any-recipient-address-code4rena-pooltogether-pooltogether-git][Solidit]],C7-4,0
Code4Arena,PoolTogether,Yield,10,Delegated amounts can be forcefully removed from anyone in the `TwabController`,[[https://solodit.xyz/issues/h-05-delegated-amounts-can-be-forcefully-removed-from-anyone-in-the-twabcontroller-code4rena-pooltogether-pooltogether-git][Solodit]],C7-4,0
Code4Arena,PoolTogether,Yield,8,Resetting delegation will result in user funds being lost forever,[[https://solodit.xyz/issues/h-06-resetting-delegation-will-result-in-user-funds-being-lost-forever-code4rena-pooltogether-pooltogether-git][Solodit]],C3-2,
Code4Arena,PoolTogether,Yield,3,`_requireVaultCollateralized()` is called at the beginning of the functions `mintYieldFee()` and `liquidate()`,[[https://solodit.xyz/issues/h-07--is-called-at-the-beginning-of-the-functions-mintyieldfee-and-liquidate-code4rena-pooltogether-pooltogether-git][Solodit]],C7-1,
Code4Arena,PoolTogether,Yield,5,Increasing reserves breaks ProzePool accounting,[[https://solodit.xyz/issues/h-08-increasing-reserves-breaks-prizepool-accounting-code4rena-pooltogether-pooltogether-git][Solodit]],C3-1,1
Code4Arena,PoolTogether,Yield,2,`Vault` is not compatible with some ERC4626 vaults,[[https://solodit.xyz/issues/h-09-vault-is-not-compatible-with-some-erc4626-vaults-code4rena-pooltogether-pooltogether-git][Solodit]],C8,
Sherlock,Dinari,RWA,4,Bypass the blacklist restriction because the blacklist check is not done when minting or burning,[[https://github.com/sherlock-audit/2023-06-dinari-judging/issues/64][Github]],C13,
Sherlock,Unstopabble,Dexes,1,Wrong accounting of the storage balances results for the protocol to be in debt even when the bad debt is repaid,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/68][Github]],O3,1
Sherlock,Unstopabble,Dexes,1,reduce_margin_by_amount in Vault.reduce_position is wrongly calculated,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/85][Github]],O3,1
Sherlock,Unstopabble,Dexes,7,"Vault: The attacker can sandwich attack himself on swaps in open_position, close_position and reduce_position to make a bad debt",[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/140][Github]],O3,1
Sherlock,Unstopabble,Dexes,6,reduce_position doesn’t update margin mapping correctly,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/143][Github]],O3,1
Sherlock,Unstopabble,Dexes,3,Leverage calculation is wrong,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/150][Github]],O3,1
Sherlock,Unstopabble,Dexes,11,Vault: _update_debt does not accrue interest,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/167][Github]],O3,1
Sherlock,Unstopabble,Dexes,6,"Adversary manipulate the middle path when calling execute_dca_order, resulting user loss, benefiting the attacker",[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/182][Github]],O3,1
Sherlock,Unstopabble,Dexes,2,Interested calculated is amplified by multiple of 1000 in _debt_interest_since_last_update,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/191][Github]],O3,1
Code4Arena,Nouns DAO,DAO,5,User can steal tokens by using duplicated ERC20 tokens as parameter in `NounsDAOLogicV1Fork.quit`,[[https://solodit.xyz/issues/h-01-user-can-steal-tokens-by-using-duplicated-erc20-tokens-as-parameter-in-nounsdaologicv1forkquit-code4rena-nouns-dao-nouns-dao-git][Solid]],C14,1
Sherlock,Hubble Exchange,"Dexes, Derivatives",11,ProcessWithdrawals is still DOS-able,[[https://solodit.xyz/issues/h-1-processwithdrawals-is-still-dos-able-sherlock-none-hubble-exchange-git][Solodit]],C15,1
Sherlock,Hubble Exchange,"Dexes, Derivatives",11,Failed withdrawals from VUSD#processWithdrawals will be lost forever,[[https://solodit.xyz/issues/h-2-failed-withdrawals-from-vusdprocesswithdrawals-will-be-lost-forever-sherlock-none-hubble-exchange-git][Solodit]],C5-4,
Sherlock,Hubble Exchange,"Dexes, Derivatives",1,Rogue validators can manipulate funding rates and profit unfairly from liquidations,[[https://solodit.xyz/issues/h-3-rogue-validators-can-manipulate-funding-rates-and-profit-unfairly-from-liquidations-sherlock-none-hubble-exchange-git][Solodit]],C5-6,
Sherlock,Symmetrical,Derivatives,13,setSymbolsPrice() can use the priceSig from a long time ago,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/113][Github]],C12,
Sherlock,Symmetrical,Derivatives,1,liquidatePositionsPartyB can be used by a malicious liquidator to liquidate only select positions which artificially inflates partyA upnl,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/160][Github]],C7-1,
Sherlock,Symmetrical,Derivatives,8,PartyA and PartyB nonce is not incremented in any of the liquidation functions which can lead to all protocol funds being stolen,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/190][Github]],C9,1
Sherlock,Symmetrical,Derivatives,2,LibMuon Signature hash collision,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/214][Github]],C9,1
Sherlock,Symmetrical,Derivatives,13,depositAndAllocateForPartyB is broken due to incorrect precision,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/222][Github]],C6-3,1
Sherlock,Symmetrical,Derivatives,5,Accounting error in PartyB's pending locked balance led to loss of funds,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/226][Github]],C6-2,1
Sherlock,Symmetrical,Derivatives,17,Liquidation can be blocked by incrementing the nonce,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/233][Github]],C1,1
Sherlock,Symmetrical,Derivatives,6,Liquidation of PartyA will fail due to underflow errors,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/241][Github]],C6-2,1
Sherlock,dodo,Dexes,2,User can perform sandwich attack on withdrawReserves for profit,[[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/22][Github]],C1,1
Sherlock,dodo,Dexes,2,Calls to liquidate don't write down totalBorrows which breaks exchange rate,[[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/46][Github]],C3-2,1
Sherlock,dodo,Dexes,4,"Anyone can sell other users' tokens as fromToken, and get the toToken's themselves due to decodeData.payer is never checked.",[[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/106][Github]],C5-3,
Sherlock,dodo,Dexes,4,"A user can get more dTokens than they should get via D3VaultFunding.userDeposit(), due to accounting issues in liquidate()",[[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/211][Github]],C3-1,1
Sherlock,dodo,Dexes,10,"When a D3MM pool repays all of the borrowed funds to vault using repayAll, an attacker can steal double the amount of those funds",[[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/217][Github]],C6-4,1
Sherlock,Arrakis,Liquidity manager,2,Pool deviation check in SimpleManager on rebalance can be bypassed,[[https://github.com/sherlock-audit/2023-06-arrakis-judging/issues/26][Github]],C1,
Sherlock,Arrakis,Liquidity manager,13,ArrakisV2Router#addLiquidityPermit2 will strand ETH,[[https://github.com/sherlock-audit/2023-06-arrakis-judging/issues/183][Github]],C8,
Code4Arena,Angle Protocol,Algo-stables,2,Possible reentray during redepmtion/swap,[[https://code4rena.com/reports/2023-06-angle#h-01-possible-reentrancy-during-redemptionswap][Github]],C17,1
Code4Arena,Angle Protocol,Algo-stables,3,The first disputer might lose funds although his dispute is valid,[[https://github.com/code-423n4/2023-06-angle-findings/issues/23][Github]],C1,1
Code4Arena,Angle Protocol,Algo-stables,2,Poor detection of disputed trees allows claiming tokens from a disputed tree,[[https://github.com/code-423n4/2023-06-angle-findings/issues/10][Github]],C10,1
Sherlock,RealWagmi,Dexes,12,Wrong calculation of tickCumulatives due to hardcoded pool fees,[[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/48][Github]],C18,1
Sherlock,RealWagmi,Dexes,2,No slippage protection when withdrawing and providing liquidity in rebalanceAll,[[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/94][Github]],C1,1
Sherlock,RealWagmi,Dexes,12,Usage of slot0 is extremely easy to manipulate,[[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/97][Github]],C1,1
Sherlock,RealWagmi,Dexes,1,Deposit transactions lose funds to front-running when multiple fee tiers are available,[[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/105][Github]],C1,1
Sherlock,RealWagmi,Dexes,3,"_estimateWithdrawalLp function might return a very large value, result in users losing significant incentives or being unable to withdraw",[[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/142][Github]],C6-3,1
Sherlock,USSD,Decentralized Stablecoin,32,Price calculation susceptible to flashloan exploits,[[https://github.com/sherlock-audit/2023-05-USSD-judging/issues/451][Github]],C1,1
Sherlock,USSD,Decentralized Stablecoin,14,The getOwnValuation() function contains errors in the price calculation,[[https://solodit.xyz/issues/h-3-the-getownvaluation-function-contains-errors-in-the-price-calculation-sherlock-none-ussd-autonomous-secure-dollar-git][Github]],C6-3,1
Sherlock,USSD,Decentralized Stablecoin,9,"Uniswap v3 pool token balance proportion does not necessarily correspond to the price, and it is easy to manipulate.",[[Source: https://github.com/sherlock-audit/2023-05-USSD-judging/issues/808][Github]],C6-2,1
Sherlock,Blueberry,Yield Agreggator,7,IchiLpOracle is extemely easy to manipulate,[[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/20][Github]],C1,1
Code4Arena,Lybra Finance,CDP,1,Making `_totalSupply` and `_totalShares` imbalance significantly by providing fake income leads to stealing fund,[[https://code4rena.com/reports/2023-06-lybra][Code4Arena]],C7-1,1
Code4Arena,Lybra Finance,CDP,1,The Constructor Caveat leads to bricking of Configurator contract.,[[https://code4rena.com/reports/2023-06-lybra][Code4Arena]],C3-1,1
Code4Arena,Lybra Finance,CDP,10,vulnerability in the `executeFlashloan` function of the `PeUSDMainnet` contract. Hackers can burn other people's eUSD token balance without permission,[[https://code4rena.com/reports/2023-06-lybra][Code4Arena]],C7-4,1
Code4Arena,Lybra Finance,CDP,2,"doesn't calculate the current borrowing amount for the provider, including the provider's borrowed shares and accumulated fees due to inconsistency in `collateralRatio` calculation",[[https://solodit.xyz/issues/h-02-doesnt-calculate-the-current-borrowing-amount-for-the-provider-including-the-providers-borrowed-shares-and-accumulated-fees-due-to-inconsistency-in-collateralratio-calculation-code4rena-lybra-finance-lybra-finance-git][Solodit]],C6-2,1
Code4Arena,Lybra Finance,CDP,22,Incorrectly implemented modifiers in `LybraConfigurator.sol` allow any address to call functions that are supposed to be restricted,[[https://solodit.xyz/issues/h-03-incorrectly-implemented-modifiers-in-lybraconfiguratorsol-allow-any-address-to-call-functions-that-are-supposed-to-be-restricted-code4rena-lybra-finance-lybra-finance-git][Solodit]],C5-3,1
Code4Arena,Lybra Finance,CDP,7,`EUSD.mint` function wrong assumption of cases when calculated sharesAmount = 0,[[https://solodit.xyz/issues/h-06-eusdmint-function-wrong-assumption-of-cases-when-calculated-sharesamount-0-code4rena-lybra-finance-lybra-finance-git][Solodit]],C6-3,1
Code4Arena,Lybra Finance,CDP,13,`_voteSucceeded()` returns true when `againstVotes > forVotes` and vice versa,[[https://github.com/code-423n4/2023-06-lybra-findings/issues/15][Github]],C14,1
Code4Arena,Lybra Finance,CDP,8,Governance wrongly calculates _quorumReached(),[[https://github.com/code-423n4/2023-06-lybra-findings/issues/14][Github]],C6-3,1
Sherlock,Ajna,Lending,1,Pool's kickWithDeposit misses liquidation debt check,[[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/82][Github]],C10,1
Sherlock,Ajna,Lending,1,kickWithDeposit removes the deposit without HTP pool state check,[[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/86][Github]],C10,1
Sherlock,Ajna,Lending,1,"moveQuoteToken updates pool state using intermediary LUP, biasing pool's interest rate calculations",[[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/87][Github]],C6-3,1
Sherlock,Ajna,Lending,1,"settlement can be called when auction period isn't concluded, allowing HPB depositors to game bad debt settlements",[[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/106][Github]],C6-4,1
Sherlock,Ajna,Lending,2,"LUP is not recalculated after adding kicking penalty to pool's debt, so kick() updates the pool state with an outdated LUP",[[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/107][Github]],C6-3,1
Sherlock,Ajna,Lending,1,Debt write off can be prohibited by HPB depositor by continuously allocating settlement blocking dust deposits in the higher buckets,[[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/110][Github]],C10,1
Sherlock,Perennial,Derivatives,3,BalancedVault.sol: loss of funds + global settlement flywheel / user settlement flywheels getting out of sync,[[https://github.com/sherlock-audit/2023-05-perennial-judging/issues/45][Github]],C3-2,1
Sherlock,Index,Indexes,6,eMode implementation is completely broken,[[https://github.com/sherlock-audit/2023-05-Index-judging/issues/251][Github]],C7-1,1
Sherlock,Index,Indexes,1,_calculateMaxBorrowCollateral calculates repay incorrectly and can lead to set token liquidation,[[https://github.com/sherlock-audit/2023-05-Index-judging/issues/254][Github]],C6-3,1
Code4Arena,Ondo,RWA,6,loss of user funds when completing CASH redemptions,[[https://code4rena.com/reports/2023-01-ondo#h-01-loss-of-user-funds-when-completing-cash-redemptions][Code4Arena]],C3-1,1
Code4Arena,Maia DAO Ecosystem,Dexes,7,Use of `slot0` to get `sqrtPriceLimitX96` can lead to price manipulation.,[[https://solodit.xyz/issues/h-02-use-of-slot0-to-get-sqrtpricelimitx96-can-lead-to-price-manipulation-code4rena-maia-dao-ecosystem-maia-dao-ecosystem-git][Solodit]],C1,1
Sherlock,Unitas Protocol,Decentralized stablecoin,7,Unitas swap function is vulnerable to Sandwich Attack at oracle price update,[[https://github.com/sherlock-audit/2023-04-unitasprotocol-judging/issues/67][Github]],C1,1
Sherlock,Iron bank,Lending,3,supplyNativeToken will strand ETH in contract if called after ACTION_DEFER_LIQUIDITY_CHECK,[[https://github.com/sherlock-audit/2023-05-ironbank-judging/issues/361][Github]],C7-1,
Code4Arena,Llama,DAO,5,governance result might be incorrect as it counts the wrong approval/disapproval,[[https://github.com/code-423n4/2023-06-llama-findings/issues/203][Github]],C6-3,1
Code4Arena,Llama,DAO,3,Anyone can change approval/disapproval threshold for any action using LlamaRelativeQuorum strategy,[[https://github.com/code-423n4/2023-06-llama-findings/issues/62][Github]],C5-3,1
Sherlock,GMX,Derivatives,1,"MarketUtils.getPoolValueInfo() does not use !maximize when evaluating impactPoolUsd, leading to wrong logic of maximizing or minimizing the pool value.",[[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/160][Github]],C6-4,1
Sherlock,GMX,Derivatives,3,Pool amount adjustments for collateral decreases aren't undone if swaps are successful,[[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/235][Github]],C3-1,1
Sherlock,GMX,Derivatives,1,Swaps associated with position orders will use the wrong price,[[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/240][Github]],C6-2,1
