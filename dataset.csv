Plataforma,Protocolo,Categoria do protocolo,N de auditores,Descrição,Link,Classificação,Rev
Sherlock,Perennial V2,Derivatives,4,Oracle request timestamp and pending position timestamp mismatch can make most position updates invalid,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/42][Github]],C3-2,
Sherlock,Perennial V2,Derivatives,1,Invalid oracle versions can cause desync of global and local positions making protocol lose funds and being unable to pay back all users,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/49][Github]],,
Sherlock,Perennial V2,Derivatives,4,Protocol fee from Market.sol is locked,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/52][Github]],C5-4,
Sherlock,Perennial V2,Derivatives,3,"PythOracle:if price.expo is less than 0, wrong prices will be recorded",[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/56][Github]],C6-4,
Sherlock,Perennial V2,Derivatives,4,Vault.sol: settleing the 0 address will disrupt accounting,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/62][Github]],,
Sherlock,Perennial V2,Derivatives,1,Keepers will suffer significant losses due to miss compensation for L1 rollup fees,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/91][Github]],,
Sherlock,Blueberry,Leverage Farming,1,Stable BPT valuation is incorrect and can be exploited to cause protocol insolvency,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/97][Github]],,
Sherlock,Blueberry,Leverage Farming,2,CurveTricryptoOracle incorrectly assumes that WETH is always the last token in the pool which leads to bad LP pricing,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/98][Github]],C8,
Sherlock,Blueberry,Leverage Farming,2,CurveTricryptoOracle#getPrice contains math error that causes LP to be priced completely wrong,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]],C6-3,
Sherlock,Blueberry,Leverage Farming,1,CVX/AURA distribution calculation is incorrect and will lead to loss of rewards at the end of each cliff,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]],,
Sherlock,Blueberry,Leverage Farming,1,wrong bToken's exchangeRateStored used for calculate ColleteralValue,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/117][Github]],,
Code4Arena,Arbitrum Foundation,DAO,3,Signatures can be replayed in `castVoteWithReasonAndParamsBySig()` to use up more votes than a user intended,[[https://code4rena.com/reports/2023-08-arbitrum][Code4Arena]],C9,
Code4Arena,PoolTogether,Yield,1,Too many rewards are distributed when a draw is closed,[[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]],C6-3,
Code4Arena,PoolTogether,Yield,16,rngComplete function should only be called by rngAuctionRelayer,[[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]],C5-3,
Sherlock,Tokensoft,Launchpad,24,"""Votes"" balance can be increased indefinitely in multiple contracts",[[https://github.com/sherlock-audit/2023-06-tokensoft-judging/issues/41][Github]],C5-3,
Sherlock,Bond Options,Options,14,All fund from Teller contract can be drained because a malicious receiver can call reclaim repeatedly,[[https://github.com/sherlock-audit/2023-06-bond-judging/issues/79][Github]],C3-1,
Sherlock,Bond Options,Options,4,All funds can be stolen from FixedStrikeOptionTeller using a token with malicious decimals,[[https://github.com/sherlock-audit/2023-06-bond-judging/issues/90][Github]],C7-1,
Sherlock,Symmetrical Update,Derivatives,2,"liquidatePartyA requires signature which doesn't have nonce, making possible unfair liquidation and loss of funds for all parties",[[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/5][Github]],C9,
Sherlock,Symmetrical Update,Derivatives,2,"liquidatePositionsPartyA limits partyB loss to partyB allocated balance, which can lead to inflated partyB balance and loss of funds",[[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/6][Github]],C6-3,
Sherlock,Cooler Update,Lending,3,Can steal gOhm by calling Clearinghouse.claimDefaulted on loans not made by Clearinghouse,[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/28][Github]],C10,
Sherlock,Cooler Update,Lending,10,"At claimDefaulted, the lender may not receive the token because the Unclaimed token is not processed",[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/119][Github]],C3-1,
Sherlock,Cooler Update,Lending,2,"Clearinghouse doesn't approve the MINTR to handle tokens in his name, which bricks the entire function.",[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]],C7-1,
Sherlock,Cooler Update,Lending,20,isCoolerCallback can be bypassed,[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]],C7-1,
