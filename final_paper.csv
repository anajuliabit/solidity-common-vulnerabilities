Plataforma,Protocolo,Categoria do protocolo,N de auditores,Descrição,Link,Classificação,Rev
Sherlock,Perennial V2,Derivatives,4,Oracle request timestamp and pending position timestamp mismatch can make most position updates invalid,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/42][Github]],C3-2,
Sherlock,Perennial V2,Derivatives,1,Invalid oracle versions can cause desync of global and local positions making protocol lose funds and being unable to pay back all users,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/49][Github]],,
Sherlock,Perennial V2,Derivatives,4,Protocol fee from Market.sol is locked,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/52][Github]],C5-4,
Sherlock,Perennial V2,Derivatives,3,"PythOracle:if price.expo is less than 0, wrong prices will be recorded",[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/56][Github]],C6-4,
Sherlock,Perennial V2,Derivatives,4,Vault.sol: settleing the 0 address will disrupt accounting,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/62][Github]],,
Sherlock,Perennial V2,Derivatives,1,Keepers will suffer significant losses due to miss compensation for L1 rollup fees,[[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/91][Github]],,
Sherlock,Blueberry,Leverage Farming,1,Stable BPT valuation is incorrect and can be exploited to cause protocol insolvency,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/97][Github]],,
Sherlock,Blueberry,Leverage Farming,2,CurveTricryptoOracle incorrectly assumes that WETH is always the last token in the pool which leads to bad LP pricing,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/98][Github]],C8,
Sherlock,Blueberry,Leverage Farming,2,CurveTricryptoOracle#getPrice contains math error that causes LP to be priced completely wrong,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]],C6-3,
Sherlock,Blueberry,Leverage Farming,1,CVX/AURA distribution calculation is incorrect and will lead to loss of rewards at the end of each cliff,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]],,
Sherlock,Blueberry,Leverage Farming,1,wrong bToken's exchangeRateStored used for calculate ColleteralValue,[[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/117][Github]],,
Code4Arena,Arbitrum Foundation,DAO,3,Signatures can be replayed in `castVoteWithReasonAndParamsBySig()` to use up more votes than a user intended,[[https://code4rena.com/reports/2023-08-arbitrum][Code4Arena]],C9,1
Code4Arena,PoolTogether,Yield,1,Too many rewards are distributed when a draw is closed,[[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]],C6-3,
Code4Arena,PoolTogether,Yield,16,rngComplete function should only be called by rngAuctionRelayer,[[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]],C5-3,
Sherlock,Tokensoft,Launchpad,24,"""Votes"" balance can be increased indefinitely in multiple contracts",[[https://github.com/sherlock-audit/2023-06-tokensoft-judging/issues/41][Github]],C5-3,
Sherlock,Bond Options,Options,14,All funds from Teller contract can be drained because a malicious receiver can call reclaim repeatedly,[[https://github.com/sherlock-audit/2023-06-bond-judging/issues/79][Github]],C3-1,
Sherlock,Bond Options,Options,4,All funds can be stolen from FixedStrikeOptionTeller using a token with malicious decimals,[[https://github.com/sherlock-audit/2023-06-bond-judging/issues/90][Github]],C7-1,
Sherlock,Symmetrical,Derivatives,2,"liquidatePartyA requires signature which doesn't have nonce, making possible unfair liquidation and loss of funds for all parties",[[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/5][Github]],C9,
Sherlock,Symmetrical,Derivatives,2,"liquidatePositionsPartyA limits partyB loss to partyB allocated balance, which can lead to inflated partyB balance and loss of funds",[[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/6][Github]],C3-2,
Sherlock,Cooler Update,Lending,3,Can steal gOhm by calling Clearinghouse.claimDefaulted on loans not made by Clearinghouse,[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/28][Github]],C10,
Sherlock,Cooler Update,Lending,10,"At claimDefaulted, the lender may not receive the token because the Unclaimed token is not processed",[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/119][Github]],C3-1,
Sherlock,Cooler Update,Lending,2,"Clearinghouse doesn't approve the MINTR to handle tokens in his name, which bricks the entire function.",[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]],C7-1,
Sherlock,Cooler Update,Lending,20,isCoolerCallback can be bypassed,[[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]],C8,
Sherlock,GFX Labs,Dexes,6,Lack of segregation between users' assets and collected fees resulting in loss of funds for the users,[[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/48][Github]],C11,
Sherlock,GFX Labs,Dexes,4,Users' funds could be stolen or locked by malicious or rouge owners,[[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/54][Github]],C12,
Code4Arena,PoolTogether,Yield,2,A malicious user can steal other user's deposits from Vault.sol,[[https://solodit.xyz/issues/h-02-a-malicious-user-can-steal-other-users-deposits-from-vaultsol-code4rena-pooltogether-pooltogether-git][Solodit]],C6-3,1
Code4Arena,PoolTogether,Yield,5,`_amountOut` is representing assets and shares at the same time in the `liquidate` function,[[https://solodit.xyz/issues/h-03-_amountout-is-representing-assets-and-shares-at-the-same-time-in-the-liquidate-function-code4rena-pooltogether-pooltogether-git][Solodit]],,
Code4Arena,PoolTogether,Yield,39,`Vault.mintYieldFee` function can be called by anyone to mint `Vault Shares` to any recipient address,[[https://solodit.xyz/issues/h-04-vaultmintyieldfee-function-can-be-called-by-anyone-to-mint-vault-shares-to-any-recipient-address-code4rena-pooltogether-pooltogether-git][Solidit]],C7-4,
Code4Arena,PoolTogether,Yield,10,Delegated amounts can be forcefully removed from anyone in the `TwabController`,[[https://solodit.xyz/issues/h-05-delegated-amounts-can-be-forcefully-removed-from-anyone-in-the-twabcontroller-code4rena-pooltogether-pooltogether-git][Solodit]],C7-4,
Code4Arena,PoolTogether,Yield,8,Resetting delegation will result in user funds being lost forever,[[https://solodit.xyz/issues/h-06-resetting-delegation-will-result-in-user-funds-being-lost-forever-code4rena-pooltogether-pooltogether-git][Solodit]],C3-2,
Code4Arena,PoolTogether,Yield,3,`_requireVaultCollateralized()` is called at the beginning of the functions `mintYieldFee()` and `liquidate()`,[[https://solodit.xyz/issues/h-07-_requirevaultcollateralized-is-called-at-the-beginning-of-the-functions-mintyieldfee-and-liquidate-code4rena-pooltogether-pooltogether-git][Solodit]],C7-1,
Code4Arena,PoolTogether,Yield,5,Increasing reserves breaks ProzePool accounting,[[https://solodit.xyz/issues/h-08-increasing-reserves-breaks-prizepool-accounting-code4rena-pooltogether-pooltogether-git][Solodit]],C3-1,1
Code4Arena,PoolTogether,Yield,2,`Vault` is not compatible with some ERC4626 vaults,[[https://solodit.xyz/issues/h-09-vault-is-not-compatible-with-some-erc4626-vaults-code4rena-pooltogether-pooltogether-git][Solodit]],C8,
Sherlock,Dinari,RWA,4,Bypass the blacklist restriction because the blacklist check is not done when minting or burning,[[https://github.com/sherlock-audit/2023-06-dinari-judging/issues/64][Github]],C13,
Sherlock,Unstopabble,Dexes,1,Wrong accounting of the storage balances results for the protocol to be in debt even when the bad debt is repaid,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/68][Github]],O3,1
Sherlock,Unstopabble,Dexes,1,reduce_margin_by_amount in Vault.reduce_position is wrongly calculated,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/85][Github]],O3,1
Sherlock,Unstopabble,Dexes,7,"Vault: The attacker can sandwich attack himself on swaps in open_position, close_position and reduce_position to make a bad debt",[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/140][Github]],O3,1
Sherlock,Unstopabble,Dexes,6,reduce_position doesn’t update margin mapping correctly,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/143][Github]],O3,1
Sherlock,Unstopabble,Dexes,3,Leverage calculation is wrong,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/150][Github]],O3,1
Sherlock,Unstopabble,Dexes,11,Vault: _update_debt does not accrue interest,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/167][Github]],O3,1
Sherlock,Unstopabble,Dexes,6,"Adversary manipulate the middle path when calling execute_dca_order, resulting user loss, benefiting the attacker",[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/182][Github]],O3,1
Sherlock,Unstopabble,Dexes,2,Interested calculated is amplified by multiple of 1000 in _debt_interest_since_last_update,[[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/191][Github]],O3,1
Code4Arena,Nouns DAO,DAO,5,User can steal tokens by using duplicated ERC20 tokens as parameter in `NounsDAOLogicV1Fork.quit`,[[https://solodit.xyz/issues/h-01-user-can-steal-tokens-by-using-duplicated-erc20-tokens-as-parameter-in-nounsdaologicv1forkquit-code4rena-nouns-dao-nouns-dao-git][Solid]],C14,1
Sherlock,Hubble Exchange,"Dexes, Derivatives",11,ProcessWithdrawals is still DOS-able,[[https://solodit.xyz/issues/h-1-processwithdrawals-is-still-dos-able-sherlock-none-hubble-exchange-git][Solodit]],C15,1
Sherlock,Hubble Exchange,"Dexes, Derivatives",11,Failed withdrawals from VUSD#processWithdrawals will be lost forever,[[https://solodit.xyz/issues/h-2-failed-withdrawals-from-vusdprocesswithdrawals-will-be-lost-forever-sherlock-none-hubble-exchange-git][Solodit]],C5-4,
Sherlock,Hubble Exchange,"Dexes, Derivatives",1,Rogue validators can manipulate funding rates and profit unfairly from liquidations,[[https://solodit.xyz/issues/h-3-rogue-validators-can-manipulate-funding-rates-and-profit-unfairly-from-liquidations-sherlock-none-hubble-exchange-git][Solodit]],,
Sherlock,Symmetrical,Derivatives,13,setSymbolsPrice() can use the priceSig from a long time ago,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/113][Github]],C12,
Sherlock,Symmetrical,Derivatives,1,liquidatePositionsPartyB can be used by a malicious liquidator to liquidate only select positions which artificially inflates partyA upnl,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/160][Github]],C7-1,
Sherlock,Symmetrical,Derivatives,8,PartyA and PartyB nonce is not incremented in any of the liquidation functions which can lead to all protocol funds being stolen,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/190][Github]],C9,1
Sherlock,Symmetrical,Derivatives,2,LibMuon Signature hash collision,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/214][Github]],C9,1
Sherlock,Symmetrical,Derivatives,13,depositAndAllocateForPartyB is broken due to incorrect precision,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/222][Github]],C6-3,1
Sherlock,Symmetrical,Derivatives,5,Accounting error in PartyB's pending locked balance led to loss of funds,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/226][Github]],C6-2,1
Sherlock,Symmetrical,Derivatives,17,Liquidation can be blocked by incrementing the nonce,[[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/233][Github]],C6-2,1
,,,,,,,
,,,,,,,
,,,,,,,
