:PROPERTIES::ID:       900aa8bb-5b2c-4dd1-abaa-9a3ac46ce5ab:END:#+TITLE: Explorando e classificando bugs comumente encontrados em contratos inteligentes* IntroduçãoA tecnologia blockchain, primeiramente introduzida por Satoshi Nakamoto em 2008,é identificada como uma megatendência computacional capaz de revolucionarmúltiplos setores industriais\cite{1}. As características distintas desegurança, transparência e rastreabilidade inerentes à blockchain têmincentivado uma ampla gama de setores a explorar seu uso na reestruturação desuas operações fundamentais. A aplicabilidade dessa tecnologia ultrapassa odomínio das criptomoedas, abarcando setores como pagamentos, gerenciamento deidentidade, saúde, eleições governamentais e outros\cite{2}.A publicação do whitepaper do Ethereum em 2014 simbolizou um avanço considerávelna evolução da tecnologia blockchain\cite{3}. Diferentemente do Bitcoin,concebido originalmente como uma moeda digital, o Ethereum inaugurou umafuncionalidade disruptiva no campo da tecnologia blockchain: os contratosinteligentes. A inovação trazida pelo Ethereum reside na incorporação de umamáquina virtual capaz de processar códigos em linguagens de programação\textit{Turing complete} na blockchain, habilitando assim a construção deaplicativos descentralizados. Estes aplicativos propõem a substituição dossistemas de back-end por contratos inteligentes que operam em umablockchain\cite{7}. Devido as características inerentes a tecnologia blockchain,como o fato de seu código ser aberto e qualquer pessoa pode interagir com oscontratos inteligentes - descentralização, os aplicativos que rodam no Ethereumsão sucetíveis a vulnerabilidades que podem ser exploradas por hackers,resultando em grande prejuízo financeiro para os protocolos e usuários dosmesmos. Apenas no primeiro trimestre de 2023, 320 milhões de dólares foramperdidos devido a ataque de hackers no Ethereum[cite:@HereHowMuch]. Uma maneirade combater a ação de hackers, é através de incentivos financeiros. Procurandoproteger seus usuários, protocolos descentralizados costumam oferecer "BugBounties", que são concursos oferecendo recurso financeiro em troca devulnerabilidades encontradas por "hackers do bem". Devido a demanda crescentepela tecnologia de contrato inteligentes nos últimos anos a projeção decrescimento anual de 2023 a 2030 é de 82.2%[cite:@SmartContractsMarket], opresente artigo tem como objetivo identificar os bugs comumente encontrados nasdiferentes categorias de contratos inteligentes e classificá-los, identificandopossíveis dificuldades na identificação dos mesmos. Para isso, foi feito umestudo com base em competições realizadas entre janeiro a setembro de 2023retiradas de diferentes plataformas de Bug Bounties.* Revisão bibliográficaO que é EVM, EOA, contracts, transactions (nonce).* Metodologia** Perguntas- Categorizando bugs** Categorias dos protocolos- Liquid Staking: Protocols that enable you to earn staking rewards on your tokens while also providing a tradeable and liquid receipt for your staked position- Lending: Protocols that allow users to borrow and lend assets- Dexes: Protocols where you can swap/trade cryptocurrency- Bridge: Protocols that bridge tokens from one network to another- CDP: Protocols that mint its own stablecoin using collateralized lending- Services: Protocols that provide a service to the user- Yield: Protocols that pay you a reward for your staking/LP on their platform- RWA: Protocols that involve Real World Assets, such as house tokenization- Derivatives: Protocols for betting with leverage- Yield Aggregator: Protocols that aggregated yield from diverse protocols- Cross Chain: Protocols that add interoperability between different blockchains- Synthetics: Protocol that created a tokenized derivative that mimics the value of another asset.- Launchpad: Protocols that launch new projects and coins- Indexes: Protocols that have a way to track/created the performance of a group of related assets- Liquidity manager: Protocols that manage Liquidity Positions in concentrated liquidity AMMs- Insurance: Protocols that are designed to provide monetary protections- Privacy: Protocols that have the intention of hiding information about transactions- Infrastructure- Algo-Stables: Protocols that provide algorithmic coins to stablecoins- Payments: Protocols that offer the ability to pay/send/receive cryptocurrency- Leveraged Farming: Protocols that allow you to leverage yield farm with borrowed money- Staking Pool: Refers to platforms where users stake their assets on native blockchains to help secure the network and earn rewards. Unlike Liquid Staking, users don't receive a token representing their staked assets, and their funds are locked up during the staking period, limiting participation in other DeFi activities- NFT Marketplace: Protocols where users can buy/sell/rent NFTs- NFT Lending: Protocols that allow you to collateralize your NFT for a loan- Options: Protocols that give you the right to buy an asset at a fixed price- Options Vault: Protocols that allow you to deposit collateral into an options strategy- Prediction Market: Protocols that allow you to wager/bet/buy in future results- Decentralized Stablecoin: Coins pegged to USD through decentralized mechanisms- Farm: Protocols that allow users to lock money in exchange for a protocol token- Uncollateralized Lending:Protocol that allows you to lend against known parties that can borrow without collaterall- Reserve Currency: OHM forks: Protocols that uses a reserve of valuable assets acquired through bonding and staking to issue and back its native token- RWA Lending: Protocols that bridge traditional finance and blockchain ecosystems by tokenizing real-world assets for use as collateral or credit assessment, enabling decentralized lending and borrowing opportunities.- Gaming: Protocols that have gaming components- Oracle: Protocols that connect data from the outside world (off-chain) with the blockchain world (on-chain)- P2P File distributoin system- DAO: A decentralized autonomous organization (DAO) is an emerging form of legal structure that has no central governing body and whose members share a common goal to act in the best interest of the entity. Popularized through cryptocurrency enthusiasts and blockchain technology, DAOs are used to make decisions in a bottom-up management approach.Fonte: https://defillama.com/categories** Classificação dos bugs- O1: We cannot access the source code of the project.- O2: Bugs that occur in off-chain components- O3: Smart contracts are written in another language- C3: Erroneous state updates.  + C3-1: Missing state update.  + C3-2: Incorrect state updates, e.g., a state update that should not be there.- C5: Privilege escalation and access control issues.  + C5-1: Users can update privileged state variables arbitrarily (caused by lack of ID-unrelated input sanitization).  + C5-2: Users can invoke some functions at a time they should not be able to do so.  + C5-3: Privileged functions can be called by anyone or at any time.  + C5-4: User funds can get locked due to missing/wrong withdraw code  + C5-6: Privileged users can profit unfarly- C6: Erroneous accounting.  + C6-1: Incorrect calculating order.  + C6-2: Returning an unexpected value that deviates from the expected semantics specified for the contract.  + C6-3: Calculations performed with incorrect numbers (e.g., x = a + b ==> x = a + c, incorrect precisions).  + C6-4: Other accounting errors (e.g., x = a + b ==> x = a - b).- C7: Broken business logic  + C7-1: Unexpected or missing function invocation sequences (e.g., external calls to dependent contracts,  exploitable sequences leading to malicious fund reallocation or manipulation).  + C7-2: Unexpected environment or contract conditions (e.g., ChainLink returning outdated data or significant slippage occurring).  + C7-3: A given function is invoked multiple times unexpectedly.  + C7-4: Unexpected function arguments.- C8: Contract implementation-specific bugs. These bugs are difficult to categorize into the above categories.- C9: Lack of signature replay protection, e.g missing nonce, hash collision- C10: Missing check.  Missing Check refers to a critical oversight in a smart contract's code where a necessary condition or validation is not properly implemented.- C11: lack of segregation between users funds- C12: Data validation    Data validation vulnerabilities arise when a smart contract does not adequately verify or sanitize inputs, especially those from untrusted sources. This lack of validation can lead to unintended and potentially harmful consequences within the contract’s operations.- C13: Whitelit/Blacklist Match  Whitelist/Blacklist Match refers to a potential vulnerability where a smart contract improperly handles addresses based on predefined lists.- C14: Arrays  Array refers to a data structure that holds multiple elements under a single variable name. Vulnerabilities related to arrays can arise when developers do not properly handle array indices or fail to validate user inputs.- C15: DoS: Denial of Service (DoS) vulnerabilities occur when an attacker can exploit a contract in a way that makes it unresponsive or significantly less efficient. This category includes cases that are not well described by another class and where the primary consequence is contract shut-down or operational inefficiency.- C16: Grielf Attack: A gas griefing attack happens when a user sends the amount of gas required to execute the target smart contract, but not its sub calls. In most cases, this results in uncontrolled behavior that could have a dangerous impact on the business logic.** Dados coletadosFoi feito a curadoria de 470 bugs classificados com severidade alta| Plataforma | Protocolo           | Categoria do protocolo | N de auditores | Descrição                                                                                                                                 | Link       | Classificação | Rev ||------------+---------------------+------------------------+----------------+-------------------------------------------------------------------------------------------------------------------------------------------+------------+---------------+-----|| Sherlock   | Perennial V2        | Derivatives            |              4 | Oracle request timestamp and pending position timestamp mismatch can make most position updates invalid                                   | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/42][Github]]     | C3-2          |     || Sherlock   | Perennial V2        | Derivatives            |              1 | Invalid oracle versions can cause desync of global and local positions making protocol lose funds and being unable to pay back all users  | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/49][Github]]     |               |     || Sherlock   | Perennial V2        | Derivatives            |              4 | Protocol fee from Market.sol is locked                                                                                                    | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/52][Github]]     | C5-4          |     || Sherlock   | Perennial V2        | Derivatives            |              3 | PythOracle:if price.expo is less than 0, wrong prices will be recorded                                                                    | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/56][Github]]     | C6-4          |     || Sherlock   | Perennial V2        | Derivatives            |              4 | Vault.sol: settleing the 0 address will disrupt accounting                                                                                | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/62][Github]]     |               |     || Sherlock   | Perennial V2        | Derivatives            |              1 | Keepers will suffer significant losses due to miss compensation for L1 rollup fees                                                        | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/91][Github]]     |               |     || Sherlock   | Blueberry           | Leverage Farming       |              1 | Stable BPT valuation is incorrect and can be exploited to cause protocol insolvency                                                       | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/97][Github]]     |               |     || Sherlock   | Blueberry           | Leverage Farming       |              2 | CurveTricryptoOracle incorrectly assumes that WETH is always the last token in the pool which leads to bad LP pricing                     | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/98][Github]]     | C8            |     || Sherlock   | Blueberry           | Leverage Farming       |              2 | CurveTricryptoOracle#getPrice contains math error that causes LP to be priced completely wrong                                            | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]]     | C6-3          |     || Sherlock   | Blueberry           | Leverage Farming       |              1 | CVX/AURA distribution calculation is incorrect and will lead to loss of rewards at the end of each cliff                                  | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]]     |               |     || Sherlock   | Blueberry           | Leverage Farming       |              1 | wrong bToken's exchangeRateStored used for calculate ColleteralValue                                                                      | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/117][Github]]     |               |     || Code4Arena | Arbitrum Foundation | DAO                    |              3 | Signatures can be replayed in `castVoteWithReasonAndParamsBySig()` to use up more votes than a user intended                              | [[https://code4rena.com/reports/2023-08-arbitrum][Code4Arena]] | C9            |   1 || Code4Arena | PoolTogether        | Yield                  |              1 | Too many rewards are distributed when a draw is closed                                                                                    | [[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]] | C6-3          |     || Code4Arena | PoolTogether        | Yield                  |             16 | rngComplete function should only be called by rngAuctionRelayer                                                                           | [[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]] | C5-3          |     || Sherlock   | Tokensoft           | Launchpad              |             24 | "Votes" balance can be increased indefinitely in multiple contracts                                                                       | [[https://github.com/sherlock-audit/2023-06-tokensoft-judging/issues/41][Github]]     | C5-3          |     || Sherlock   | Bond Options        | Options                |             14 | All funds from Teller contract can be drained because a malicious receiver can call reclaim repeatedly                                    | [[https://github.com/sherlock-audit/2023-06-bond-judging/issues/79][Github]]     | C3-1          |     || Sherlock   | Bond Options        | Options                |              4 | All funds can be stolen from FixedStrikeOptionTeller using a token with malicious decimals                                                | [[https://github.com/sherlock-audit/2023-06-bond-judging/issues/90][Github]]     | C7-1          |     || Sherlock   | Symmetrical         | Derivatives            |              2 | liquidatePartyA requires signature which doesn't have nonce, making possible unfair liquidation and loss of funds for all parties         | [[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/5][Github]]     | C9            |     || Sherlock   | Symmetrical         | Derivatives            |              2 | liquidatePositionsPartyA limits partyB loss to partyB allocated balance, which can lead to inflated partyB balance and loss of funds      | [[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/6][Github]]     | C3-2          |     || Sherlock   | Cooler Update       | Lending                |              3 | Can steal gOhm by calling Clearinghouse.claimDefaulted on loans not made by Clearinghouse                                                 | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/28][Github]]     | C10           |     || Sherlock   | Cooler Update       | Lending                |             10 | At claimDefaulted, the lender may not receive the token because the Unclaimed token is not processed                                      | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/119][Github]]     | C3-1          |     || Sherlock   | Cooler Update       | Lending                |              2 | Clearinghouse doesn't approve the MINTR to handle tokens in his name, which bricks the entire function.                                   | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]]     | C7-1          |     || Sherlock   | Cooler Update       | Lending                |             20 | isCoolerCallback can be bypassed                                                                                                          | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]]     | C8            |     || Sherlock   | GFX Labs            | Dexes                  |              6 | Lack of segregation between users' assets and collected fees resulting in loss of funds for the users                                     | [[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/48][Github]]     | C11           |     || Sherlock   | GFX Labs            | Dexes                  |              4 | Users' funds could be stolen or locked by malicious or rouge owners                                                                       | [[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/54][Github]]     | C12           |     || Code4Arena | PoolTogether        | Yield                  |              2 | A malicious user can steal other user's deposits from Vault.sol                                                                           | [[https://solodit.xyz/issues/h-02-a-malicious-user-can-steal-other-users-deposits-from-vaultsol-code4rena-pooltogether-pooltogether-git][Solodit]]    | C6-3          |   1 || Code4Arena | PoolTogether        | Yield                  |              5 | `_amountOut` is representing assets and shares at the same time in the `liquidate` function                                               | [[https://solodit.xyz/issues/h-03-_amountout-is-representing-assets-and-shares-at-the-same-time-in-the-liquidate-function-code4rena-pooltogether-pooltogether-git][Solodit]]    |               |     || Code4Arena | PoolTogether        | Yield                  |             39 | `Vault.mintYieldFee` function can be called by anyone to mint `Vault Shares` to any recipient address                                     | [[https://solodit.xyz/issues/h-04-vaultmintyieldfee-function-can-be-called-by-anyone-to-mint-vault-shares-to-any-recipient-address-code4rena-pooltogether-pooltogether-git][Solidit]]    | C7-4          |     || Code4Arena | PoolTogether        | Yield                  |             10 | Delegated amounts can be forcefully removed from anyone in the `TwabController`                                                           | [[https://solodit.xyz/issues/h-05-delegated-amounts-can-be-forcefully-removed-from-anyone-in-the-twabcontroller-code4rena-pooltogether-pooltogether-git][Solodit]]    | C7-4          |     || Code4Arena | PoolTogether        | Yield                  |              8 | Resetting delegation will result in user funds being lost forever                                                                         | [[https://solodit.xyz/issues/h-06-resetting-delegation-will-result-in-user-funds-being-lost-forever-code4rena-pooltogether-pooltogether-git][Solodit]]    | C3-2          |     || Code4Arena | PoolTogether        | Yield                  |              3 | `_requireVaultCollateralized()` is called at the beginning of the functions `mintYieldFee()` and `liquidate()`                            | [[https://solodit.xyz/issues/h-07-_requirevaultcollateralized-is-called-at-the-beginning-of-the-functions-mintyieldfee-and-liquidate-code4rena-pooltogether-pooltogether-git][Solodit]]    | C7-1          |     || Code4Arena | PoolTogether        | Yield                  |              5 | Increasing reserves breaks ProzePool accounting                                                                                           | [[https://solodit.xyz/issues/h-08-increasing-reserves-breaks-prizepool-accounting-code4rena-pooltogether-pooltogether-git][Solodit]]    | C3-1          |   1 || Code4Arena | PoolTogether        | Yield                  |              2 | `Vault` is not compatible with some ERC4626 vaults                                                                                        | [[https://solodit.xyz/issues/h-09-vault-is-not-compatible-with-some-erc4626-vaults-code4rena-pooltogether-pooltogether-git][Solodit]]    | C8            |     || Sherlock   | Dinari              | RWA                    |              4 | Bypass the blacklist restriction because the blacklist check is not done when minting or burning                                          | [[https://github.com/sherlock-audit/2023-06-dinari-judging/issues/64][Github]]     | C13           |     || Sherlock   | Unstopabble         | Dexes                  |              1 | Wrong accounting of the storage balances results for the protocol to be in debt even when the bad debt is repaid                          | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/68][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |              1 | reduce_margin_by_amount in Vault.reduce_position is wrongly calculated                                                                    | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/85][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |              7 | Vault: The attacker can sandwich attack himself on swaps in open_position, close_position and reduce_position to make a bad debt          | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/140][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |              6 | reduce_position doesn’t update margin mapping correctly                                                                                   | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/143][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |              3 | Leverage calculation is wrong                                                                                                             | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/150][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |             11 | Vault: _update_debt does not accrue interest                                                                                              | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/167][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |              6 | Adversary manipulate the middle path when calling execute_dca_order, resulting user loss, benefiting the attacker                         | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/182][Github]]     | O3            |   1 || Sherlock   | Unstopabble         | Dexes                  |              2 | Interested calculated is amplified by multiple of 1000 in _debt_interest_since_last_update                                                | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/191][Github]]     | O3            |   1 || Code4Arena | Nouns DAO           | DAO                    |              5 | User can steal tokens by using duplicated ERC20 tokens as parameter in `NounsDAOLogicV1Fork.quit`                                         | [[https://solodit.xyz/issues/h-01-user-can-steal-tokens-by-using-duplicated-erc20-tokens-as-parameter-in-nounsdaologicv1forkquit-code4rena-nouns-dao-nouns-dao-git][Solid]]      | C14           |   1 || Sherlock   | Hubble Exchange     | Dexes, Derivatives     |             11 | ProcessWithdrawals is still DOS-able                                                                                                      | [[https://solodit.xyz/issues/h-1-processwithdrawals-is-still-dos-able-sherlock-none-hubble-exchange-git][Solodit]]    | C15           |   1 || Sherlock   | Hubble Exchange     | Dexes, Derivatives     |             11 | Failed withdrawals from VUSD#processWithdrawals will be lost forever                                                                      | [[https://solodit.xyz/issues/h-2-failed-withdrawals-from-vusdprocesswithdrawals-will-be-lost-forever-sherlock-none-hubble-exchange-git][Solodit]]    | C5-4          |     || Sherlock   | Hubble Exchange     | Dexes, Derivatives     |              1 | Rogue validators can manipulate funding rates and profit unfairly from liquidations                                                       | [[https://solodit.xyz/issues/h-3-rogue-validators-can-manipulate-funding-rates-and-profit-unfairly-from-liquidations-sherlock-none-hubble-exchange-git][Solodit]]    |               |     || Sherlock   | Symmetrical         | Derivatives            |             13 | setSymbolsPrice() can use the priceSig from a long time ago                                                                               | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/113][Github]]     | C12           |     || Sherlock   | Symmetrical         | Derivatives            |              1 | liquidatePositionsPartyB can be used by a malicious liquidator to liquidate only select positions which artificially inflates partyA upnl | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/160][Github]]     | C7-1          |     || Sherlock   | Symmetrical         | Derivatives            |              8 | PartyA and PartyB nonce is not incremented in any of the liquidation functions which can lead to all protocol funds being stolen          | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/190][Github]]     | C9            |   1 || Sherlock   | Symmetrical         | Derivatives            |              2 | LibMuon Signature hash collision                                                                                                          | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/214][Github]]     | C9            |   1 || Sherlock   | Symmetrical         | Derivatives            |             13 | depositAndAllocateForPartyB is broken due to incorrect precision                                                                          | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/222][Github]]     | C6-3          |   1 || Sherlock   | Symmetrical         | Derivatives            |              5 | Accounting error in PartyB's pending locked balance led to loss of funds                                                                  | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/226][Github]]     | C6-2          |   1 || Sherlock   | Symmetrical         | Derivatives            |             17 |  Liquidation can be blocked by incrementing the nonce                                                                   | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/226][Github]]     | C6-2          |   1 ||            |                     |                        |                |                                                                                                                                           |            |               |     ||            |                     |                        |                |                                                                                                                                           |            |               |     ||            |                     |                        |                |                                                                                                                                           |            |               |     |# encontrar nome melhor** Desenvolvimento** Categorias** Dificuldade