:PROPERTIES:#+TITLE: Explorando e classificando bugs comumente encontrados em contratos inteligentes#+AUTHOR: Ana Julia Bittencourt Fogaça#+OPTIONS: toc:nil#+LANGUAGE: pt-br#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline#+LATEX_CLASS: article#+LATEX_CLASS_OPTIONS: [12pt]#+LATEX_HEADER: \usepackage[utf8]{inputenc}#+LATEX_HEADER: \usepackage{sbc-template}#+LATEX_HEADER: \usepackage{graphicx,url}#+LATEX_HEADER: \address{Universidade do Sul de Santa Catarina (UNISUL)\\ Tubarão - SC - Brasil\\ anajuliabit@gmail.com}#+LATEX_HEADER: \sloppy#+LATEX_HEADER: \usepackage[style=numeric]{biblatex}#+LATEX_HEADER: \addbibresource{references.bib}:END:* Abstract:PROPERTIES::CUSTOM_ID: abstract:END:* Resumo:PROPERTIES::CUSTOM_ID: resumo:END:* IntroduçãoA tecnologia blockchain, primeiramente introduzida por Satoshi Nakamoto em 2008,é identificada como uma megatendência computacional capaz de revolucionarmúltiplos setores industriais[cite:@TechnologyTippingPoints]. As características distintas desegurança, transparência e rastreabilidade inerentes à blockchain têmincentivado uma ampla gama de setores a explorar seu uso na reestruturação desuas operações fundamentais. A aplicabilidade dessa tecnologia ultrapassa odomínio das criptomoedas, abarcando setores como pagamentos, gerenciamento deidentidade, saúde, eleições governamentais e outros[cite:@BlockchainAdoptionsMaritime].A publicação do whitepaper do Ethereum em 2014 simbolizou um avanço considerável evolução da tecnologia blockchain[cite:@EthereumWhitepaper]. Diferentemente do Bitcoin,concebido originalmente como uma moeda digital, o Ethereum inaugurou umafuncionalidade disruptiva no campo da tecnologia blockchain: os contratosinteligentes. A inovação trazida pelo Ethereum reside na incorporação de umamáquina virtual capaz de processar códigos em linguagens de programação\textit{Turing complete} na blockchain, habilitando assim a construção deaplicativos descentralizados. Devido as características inerentes a tecnologia blockchain,como o fato de seu código ser aberto e qualquer pessoa pode interagir com oscontratos inteligentes - descentralização, os aplicativos que rodam no Ethereumsão sucetíveis a vulnerabilidades que podem ser exploradas por hackers,resultando em grande prejuízo financeiro para os protocolos e usuários dosmesmos. Apenas no primeiro trimestre de 2023, 320 milhões de dólares foramperdidos devido a ataque de hackers no Ethereum[cite:@HereHowMuch]. Uma maneirade combater a ação de hackers, é através de incentivos financeiros. Procurandoproteger seus usuários, protocolos descentralizados costumam oferecer "BugBounties", que são concursos oferecendo recurso financeiro em troca devulnerabilidades encontradas por "hackers do bem". Devido a demanda crescentepela tecnologia de contrato inteligentes nos últimos anos a projeção decrescimento anual de 2023 a 2030 é de 82.2%[cite:@SmartContractsMarket], opresente artigo tem como objetivo identificar os bugs comumente encontrados nasdiferentes categorias de contratos inteligentes e classificá-los, identificandopossíveis dificuldades na identificação dos mesmos. Para isso, foi feito umestudo com base em competições realizadas entre janeiro a setembro de 2023retiradas de diferentes plataformas de Bug Bounties.** TODO add data from * Revisão bibliográfica** Ethereum** EVM** Smart contracts** Solidity** ERCs* Metodologia** Perguntas da pesquisa- Q1: Que tipo de vulnerabilidade é mais difícil de ser encontrada por auditores?- Q2: Que categoria de protocolo apresenta mais presença de bugs?- Q3: Os auditores frequentemente perdem tipos específicos de bugs que são posteriormente explorados?- Q4: Qual é o impacto financeiro médio de diferentes tipos de vulnerabilidades?- Q5: Como a complexidade do contrato inteligente afeta a probabilidade de encontrar bugs?** Categorias dos protocolos (todas) :noexport:- Liquid Staking: Protocols that enable you to earn staking rewards on your tokens while also providing a tradeable and liquid receipt for your staked position- Lending: Protocols that allow users to borrow and lend assets- Bridge: Protocols that bridge tokens from one network to another- Services: Protocols that provide a service to the user- Yield: Protocols that pay you a reward for your staking/LP on their platform- Cross Chain: Protocols that add interoperability between different blockchains- Synthetics: Protocol that created a tokenized derivative that mimics the value of another asset.- Liquidity manager: Protocols that manage Liquidity Positions in concentrated liquidity AMMs- Insurance: Protocols that are designed to provide monetary protections- Privacy: Protocols that have the intention of hiding information about transactions- Infrastructure- Payments: Protocols that offer the ability to pay/send/receive cryptocurrency- Leveraged Farming: Protocols that allow you to leverage yield farm with borrowed money- Staking Pool: Refers to platforms where users stake their assets on native blockchains to help secure the network and earn rewards. Unlike Liquid Staking, users don't receive a token representing their staked assets, and their funds are locked up during the staking period, limiting participation in other DeFi activities- NFT Marketplace: Protocols where users can buy/sell/rent NFTs- NFT Lending: Protocols that allow you to collateralize your NFT for a loan- Options: Protocols that give you the right to buy an asset at a fixed price- Options Vault: Protocols that allow you to deposit collateral into an options strategy- Prediction Market: Protocols that allow you to wager/bet/buy in future results- Decentralized Stablecoin: Coins pegged to USD through decentralized mechanisms- Farm: Protocols that allow users to lock money in exchange for a protocol token- Uncollateralized Lending:Protocol that allows you to lend against known parties that can borrow without collaterall- Reserve Currency: OHM forks: Protocols that uses a reserve of valuable assets acquired through bonding and staking to issue and back its native token- RWA Lending: Protocols that bridge traditional finance and blockchain ecosystems by tokenizing real-world assets for use as collateral or credit assessment, enabling decentralized lending and borrowing opportunities.- Gaming: Protocols that have gaming components- Oracle: Protocols that connect data from the outside world (off-chain) with the blockchain world (on-chain)Fonte: https://defillama.com/categories** Categoria dos protocolos- Derivatives: Protocols for betting with leverage- Yield Aggregator: Protocols that aggregated yield from diverse protocols- DAO: A decentralized autonomous organization (DAO) is an emerging form of legal structure that has no central governing body and whose members share a common goal to act in the best interest of the entity. Popularized through cryptocurrency enthusiasts and blockchain technology, DAOs are used to make decisions in a bottom-up management approach.- Launchpad: Protocols that launch new projects and coins- Indexes: Protocols that have a way to track/created the performance of a group of related assets- Dexes: Protocols where you can swap/trade cryptocurrency- RWA: Protocols that involve Real World Assets, such as house tokenization- Algo-Stables: Protocols that provide algorithmic coins to stablecoins- CDP: Protocols that mint its own stablecoin using collateralized lending** Classificação dos bugs- O: Out-of-scope + We cannot access the source code of the project. + Bugs that occur in off-chain components + Smart contracts are written in another language- C01: Mempool Manipulation / Front-Running Vulnerabilities, (e.g sandwich attacks, flash-loan exploits)- C02: Reentry attack - Reentrancy vulnerabilities happen when external contract calls are made before internal state updates, allowing an adversary to recursively call back into the contract, exploiting the inconsistent state.- C03: Erroneous state updates.  + C03-1: Missing state update.  + C03-2: Incorrect state updates, e.g., a state update that should not be there.- C04: Hardcoded Setting - refers to the practice of embedding fixed values or parameters directly into the source code of a smart contract. This can pose a security risk if the setting needs to be dynamic or adaptable.- C05: Privilege escalation and access control issues.  + C05-1: Privileged functions can be called by anyone or at any time.  + C05-2: User funds can get locked due to missing/wrong withdraw code- C06: Wrong Math / Erroneous accounting.  Wrong Math refers to a potential issue where mathematical operations within a smart contract are implemented incorrectly, leading to inaccurate calculations.  + C06-1: Incorrect calculating order.  + C06-2: Returning an unexpected value that deviates from the expected semantics specified for the contract.  + C06-3: Calculations performed with incorrect numbers (e.g., x = a + b ==> x = a + c, incorrect precisions).  + C06-4: Other accounting errors (e.g., x = a + b ==> x = a - b).- C07: Broken business logicLogic vulnerabilities involve flaws in the business logic or protocols of a smart contract, where the implementation matches the developer's intention, but the underlying logic is inherently flawed.This category includes:+ C07-1: Unexpected or missing function invocation sequences (e.g., external calls to dependent contracts,  exploitable sequences leading to malicious fund reallocation or manipulation).+ C07-2: Unexpected environment or contract conditions (e.g., ChainLink returning outdated data or significant slippage occurring).+ C07-4: Unexpected function arguments.- C08: Contract implementation-specific bugs. These bugs are difficult to categorize into the above categories.- C09: Lack of signature replay protection, e.g missing nonce, hash collision- C10: Missing check.Missing Check refers to a critical oversight in a smart contract's code where a necessary condition or validation is not properly implemented.- C11: lack of segregation between users funds- C12: Data validationData validation vulnerabilities arise when a smart contract does not adequately verify or sanitize inputs, especially those from untrusted sources. This lack of validation can lead to unintended and potentially harmful consequences within the contract’s operations.- C13: Whitelist/Blacklist MatchWhitelist/Blacklist Match refers to a potential vulnerability where a smart contract improperly handles addresses based on predefined lists.- C14: ArraysVulnerabilities related to arrays can arise when developers do not properly handle array indices or fail to validate user inputs.would typically be reserved for vulnerabilities that directly arise from mishandling or misinterpreting arrays in the code. For example, if there were out-of-bound reads/writes, deletion mishaps, or issues with array resizing- C15: DoS: Denial of Service (DoS) vulnerabilities occur when an attacker can exploit a contract in a way that makes it unresponsive or significantly less efficient. This category includes cases that are not well described by another class and where the primary consequence is contract shut-down or operational inefficiency.- C16: Grielf Attack: A gas griefing attack happens when a user sends the amount of gas required to execute the target smart contract, but not its sub calls. In most cases, this results in uncontrolled behavior that could have a dangerous impact on the business logic.** Dados coletadosFoi feito a curadoria de 100 bugs classificados com severidade alta*** Dataset :noexport:#+tblname: dataset| Platform   | Protocol            | Protocol Category        | Auditors | Description                                                                                                                                                                          | Link       | Class | Rev ||------------+---------------------+--------------------------+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-------+-----|| Sherlock   | Perennial V2        | Derivatives              |        4 | Oracle request timestamp and pending position timestamp mismatch can make most position updates invalid                                                                              | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/42][Github]]     | C03-2 |     || Sherlock   | Perennial V2        | Derivatives              |        1 | Invalid oracle versions can cause desync of global and local positions making protocol lose funds and being unable to pay back all users                                             | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/49][Github]]     | C03-2 |     || Sherlock   | Perennial V2        | Derivatives              |        4 | Protocol fee from Market.sol is locked                                                                                                                                               | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/52][Github]]     | C05-2 |     || Sherlock   | Perennial V2        | Derivatives              |        3 | PythOracle:if price.expo is less than 0, wrong prices will be recorded                                                                                                               | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/56][Github]]     | C06-4 |     || Sherlock   | Perennial V2        | Derivatives              |        4 | Vault.sol: settleing the 0 address will disrupt accounting                                                                                                                           | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/62][Github]]     | C03-2 |     || Sherlock   | Perennial V2        | Derivatives              |        1 | Keepers will suffer significant losses due to miss compensation for L1 rollup fees                                                                                                   | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/91][Github]]     | C07-2 |     || Sherlock   | Blueberry           | Yield Agreggator         |        1 | Stable BPT valuation is incorrect and can be exploited to cause protocol insolvency                                                                                                  | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/97][Github]]     | C06-2 |   1 || Sherlock   | Blueberry           | Yield Agreggator         |        2 | CurveTricryptoOracle incorrectly assumes that WETH is always the last token in the pool which leads to bad LP pricing                                                                | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/98][Github]]     | C06-2 |   1 || Sherlock   | Blueberry           | Yield Agreggator         |        2 | CurveTricryptoOracle#getPrice contains math error that causes LP to be priced completely wrong                                                                                       | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]]     | C06-3 |   1 || Sherlock   | Blueberry           | Yield Agreggator         |        1 | CVX/AURA distribution calculation is incorrect and will lead to loss of rewards at the end of each cliff                                                                             | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/240][Github]]     | C06-2 |   1 || Sherlock   | Blueberry           | Yield Agreggator         |        1 | wrong bToken's exchangeRateStored used for calculate ColleteralValue                                                                                                                 | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/117][Github]]     | C06-3 |   1 || Code4Arena | Arbitrum Foundation | DAO                      |        3 | Signatures can be replayed in `castVoteWithReasonAndParamsBySig()` to use up more votes than a user intended                                                                         | [[https://code4rena.com/reports/2023-08-arbitrum][Code4Arena]] | C09   |   1 || Code4Arena | PoolTogether        | Yield                    |        1 | Too many rewards are distributed when a draw is closed                                                                                                                               | [[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]] | C06-3 |   1 || Code4Arena | PoolTogether        | Yield                    |       16 | rngComplete function should only be called by rngAuctionRelayer                                                                                                                      | [[https://code4rena.com/reports/2023-08-pooltogether][Code4Arena]] | C05-1 |     || Sherlock   | Tokensoft           | Launchpad                |       24 | "Votes" balance can be increased indefinitely in multiple contracts                                                                                                                  | [[https://github.com/sherlock-audit/2023-06-tokensoft-judging/issues/41][Github]]     | C05-1 |     || Sherlock   | Bond Options        | Options                  |       14 | All funds from Teller contract can be drained because a malicious receiver can call reclaim repeatedly                                                                               | [[https://github.com/sherlock-audit/2023-06-bond-judging/issues/79][Github]]     | C03-1 |   1 || Sherlock   | Bond Options        | Options                  |        4 | All funds can be stolen from FixedStrikeOptionTeller using a token with malicious decimals                                                                                           | [[https://github.com/sherlock-audit/2023-06-bond-judging/issues/90][Github]]     | C07-1 |     || Sherlock   | Symmetrical         | Derivatives              |        2 | liquidatePartyA requires signature which doesn't have nonce, making possible unfair liquidation and loss of funds for all parties                                                    | [[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/5][Github]]     | C09   |     || Sherlock   | Symmetrical         | Derivatives              |        2 | liquidatePositionsPartyA limits partyB loss to partyB allocated balance, which can lead to inflated partyB balance and loss of funds                                                 | [[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/6][Github]]     | C03-2 |     || Sherlock   | Cooler              | Lending                  |        3 | Can steal gOhm by calling Clearinghouse.claimDefaulted on loans not made by Clearinghouse                                                                                            | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/28][Github]]     | C10   |     || Sherlock   | Cooler              | Lending                  |       10 | At claimDefaulted, the lender may not receive the token because the Unclaimed token is not processed                                                                                 | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/119][Github]]     | C03-1 |   1 || Sherlock   | Cooler              | Lending                  |        2 | Clearinghouse doesn't approve the MINTR to handle tokens in his name, which bricks the entire function.                                                                              | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]]     | C07-1 |     || Sherlock   | Cooler              | Lending                  |       20 | isCoolerCallback can be bypassed                                                                                                                                                     | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/187][Github]]     | C05-1 |   1 || Sherlock   | GFX Labs            | Dexes                    |        6 | Lack of segregation between users' assets and collected fees resulting in loss of funds for the users                                                                                | [[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/48][Github]]     | C11   |     || Sherlock   | GFX Labs            | Dexes                    |        4 | Users' funds could be stolen or locked by malicious or rouge owners                                                                                                                  | [[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/54][Github]]     | C12   |     || Code4Arena | PoolTogether        | Yield                    |        2 | A malicious user can steal other user's deposits from Vault.sol                                                                                                                      | [[https://solodit.xyz/issues/h-02-a-malicious-user-can-steal-other-users-deposits-from-vaultsol-code4rena-pooltogether-pooltogether-git][Solodit]]    | C06-3 |   1 || Code4Arena | PoolTogether        | Yield                    |        5 | `_amountOut` is representing assets and shares at the same time in the `liquidate` function                                                                                          | [[https://github.com/code-423n4/2023-07-pooltogether-findings/issues/427][Github]]     | C06-2 |     || Code4Arena | PoolTogether        | Yield                    |       39 | `Vault.mintYieldFee` function can be called by anyone to mint `Vault Shares` to any recipient address                                                                                | [[https://solodit.xyz/issues/h-04-vaultmintyieldfee-function-can-be-called-by-anyone-to-mint-vault-shares-to-any-recipient-address-code4rena-pooltogether-pooltogether-git][Solidit]]    | C07-4 |   0 || Code4Arena | PoolTogether        | Yield                    |       10 | Delegated amounts can be forcefully removed from anyone in the `TwabController`                                                                                                      | [[https://solodit.xyz/issues/h-05-delegated-amounts-can-be-forcefully-removed-from-anyone-in-the-twabcontroller-code4rena-pooltogether-pooltogether-git][Solodit]]    | C07-4 |   0 || Code4Arena | PoolTogether        | Yield                    |        8 | Resetting delegation will result in user funds being lost forever                                                                                                                    | [[https://solodit.xyz/issues/h-06-resetting-delegation-will-result-in-user-funds-being-lost-forever-code4rena-pooltogether-pooltogether-git][Solodit]]    | C03-2 |     || Code4Arena | PoolTogether        | Yield                    |        3 | `_requireVaultCollateralized()` is called at the beginning of the functions `mintYieldFee()` and `liquidate()`                                                                       | [[https://solodit.xyz/issues/h-07--is-called-at-the-beginning-of-the-functions-mintyieldfee-and-liquidate-code4rena-pooltogether-pooltogether-git][Solodit]]    | C07-1 |     || Code4Arena | PoolTogether        | Yield                    |        5 | Increasing reserves breaks ProzePool accounting                                                                                                                                      | [[https://solodit.xyz/issues/h-08-increasing-reserves-breaks-prizepool-accounting-code4rena-pooltogether-pooltogether-git][Solodit]]    | C03-1 |   1 || Code4Arena | PoolTogether        | Yield                    |        2 | `Vault` is not compatible with some ERC4626 vaults                                                                                                                                   | [[https://solodit.xyz/issues/h-09-vault-is-not-compatible-with-some-erc4626-vaults-code4rena-pooltogether-pooltogether-git][Solodit]]    | C07-2 |     || Sherlock   | Dinari              | RWA                      |        4 | Bypass the blacklist restriction because the blacklist check is not done when minting or burning                                                                                     | [[https://github.com/sherlock-audit/2023-06-dinari-judging/issues/64][Github]]     | C13   |     || Sherlock   | Unstopabble         | Dexes                    |        1 | Wrong accounting of the storage balances results for the protocol to be in debt even when the bad debt is repaid                                                                     | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/68][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |        1 | reduce_margin_by_amount in Vault.reduce_position is wrongly calculated                                                                                                               | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/85][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |        7 | Vault: The attacker can sandwich attack himself on swaps in open_position, close_position and reduce_position to make a bad debt                                                     | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/140][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |        6 | reduce_position doesn’t update margin mapping correctly                                                                                                                              | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/143][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |        3 | Leverage calculation is wrong                                                                                                                                                        | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/150][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |       11 | Vault: _update_debt does not accrue interest                                                                                                                                         | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/167][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |        6 | Adversary manipulate the middle path when calling execute_dca_order, resulting user loss, benefiting the attacker                                                                    | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/182][Github]]     | O     |   1 || Sherlock   | Unstopabble         | Dexes                    |        2 | Interested calculated is amplified by multiple of 1000 in _debt_interest_since_last_update                                                                                           | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/191][Github]]     | O     |   1 || Code4Arena | Nouns DAO           | DAO                      |        5 | User can steal tokens by using duplicated ERC20 tokens as parameter in `NounsDAOLogicV1Fork.quit`                                                                                    | [[https://solodit.xyz/issues/h-01-user-can-steal-tokens-by-using-duplicated-erc20-tokens-as-parameter-in-nounsdaologicv1forkquit-code4rena-nouns-dao-nouns-dao-git][Solid]]      | C14   |   1 || Sherlock   | Hubble Exchange     | Dexes, Derivatives       |       11 | ProcessWithdrawals is still DOS-able                                                                                                                                                 | [[https://solodit.xyz/issues/h-1-processwithdrawals-is-still-dos-able-sherlock-none-hubble-exchange-git][Solodit]]    | C15   |   1 || Sherlock   | Hubble Exchange     | Dexes, Derivatives       |       11 | Failed withdrawals from VUSD#processWithdrawals will be lost forever                                                                                                                 | [[https://solodit.xyz/issues/h-2-failed-withdrawals-from-vusdprocesswithdrawals-will-be-lost-forever-sherlock-none-hubble-exchange-git][Solodit]]    | C05-2 |     || Sherlock   | Hubble Exchange     | Dexes, Derivatives       |        1 | Rogue validators can manipulate funding rates and profit unfairly from liquidations                                                                                                  | [[https://solodit.xyz/issues/h-3-rogue-validators-can-manipulate-funding-rates-and-profit-unfairly-from-liquidations-sherlock-none-hubble-exchange-git][Solodit]]    | C08   |     || Sherlock   | Symmetrical         | Derivatives              |       13 | setSymbolsPrice() can use the priceSig from a long time ago                                                                                                                          | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/113][Github]]     | C12   |     || Sherlock   | Symmetrical         | Derivatives              |        1 | liquidatePositionsPartyB can be used by a malicious liquidator to liquidate only select positions which artificially inflates partyA upnl                                            | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/160][Github]]     | C07-1 |     || Sherlock   | Symmetrical         | Derivatives              |        8 | PartyA and PartyB nonce is not incremented in any of the liquidation functions which can lead to all protocol funds being stolen                                                     | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/190][Github]]     | C09   |   1 || Sherlock   | Symmetrical         | Derivatives              |        2 | LibMuon Signature hash collision                                                                                                                                                     | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/214][Github]]     | C09   |   1 || Sherlock   | Symmetrical         | Derivatives              |       13 | depositAndAllocateForPartyB is broken due to incorrect precision                                                                                                                     | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/222][Github]]     | C06-3 |   1 || Sherlock   | Symmetrical         | Derivatives              |        5 | Accounting error in PartyB's pending locked balance led to loss of funds                                                                                                             | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/226][Github]]     | C06-2 |   1 || Sherlock   | Symmetrical         | Derivatives              |       17 | Liquidation can be blocked by incrementing the nonce                                                                                                                                 | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/233][Github]]     | C01   |   1 || Sherlock   | Symmetrical         | Derivatives              |        6 | Liquidation of PartyA will fail due to underflow errors                                                                                                                              | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/241][Github]]     | C06-2 |   1 || Sherlock   | DODO                | Dexes                    |        2 | User can perform sandwich attack on withdrawReserves for profit                                                                                                                      | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/22][Github]]     | C01   |   1 || Sherlock   | DODO                | Dexes                    |        2 | Calls to liquidate don't write down totalBorrows which breaks exchange rate                                                                                                          | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/46][Github]]     | C03-2 |   1 || Sherlock   | DODO                | Dexes                    |        4 | Anyone can sell other users' tokens as fromToken, and get the toToken's themselves due to decodeData.payer is never checked.                                                         | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/106][Github]]     | C05-1 |     || Sherlock   | DODO                | Dexes                    |        4 | A user can get more dTokens than they should get via D3VaultFunding.userDeposit(), due to accounting issues in liquidate()                                                           | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/211][Github]]     | C03-1 |   1 || Sherlock   | DODO                | Dexes                    |       10 | When a D3MM pool repays all of the borrowed funds to vault using repayAll, an attacker can steal double the amount of those funds                                                    | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/217][Github]]     | C06-4 |   1 || Sherlock   | Arrakis             | Liquidity manager        |        2 | Pool deviation check in SimpleManager on rebalance can be bypassed                                                                                                                   | [[https://github.com/sherlock-audit/2023-06-arrakis-judging/issues/26][Github]]     | C07-1 |     || Sherlock   | Arrakis             | Liquidity manager        |       13 | ArrakisV2Router#addLiquidityPermit2 will strand ETH                                                                                                                                  | [[https://github.com/sherlock-audit/2023-06-arrakis-judging/issues/183][Github]]     | C07-1 |   1 || Code4Arena | Angle Protocol      | Algo-Stables             |        2 | Possible reentray during redepmtion/swap                                                                                                                                             | [[https://code4rena.com/reports/2023-06-angle#h-01-possible-reentrancy-during-redemptionswap][Github]]     | C02   |   1 || Code4Arena | Angle Protocol      | Algo-Stables             |        3 | The first disputer might lose funds although his dispute is valid                                                                                                                    | [[https://github.com/code-423n4/2023-06-angle-findings/issues/23][Github]]     | C01   |   1 || Code4Arena | Angle Protocol      | Algo-Stables             |        2 | Poor detection of disputed trees allows claiming tokens from a disputed tree                                                                                                         | [[https://github.com/code-423n4/2023-06-angle-findings/issues/10][Github]]     | C10   |   1 || Sherlock   | RealWagmi           | Dexes                    |       12 | Wrong calculation of tickCumulatives due to hardcoded pool fees                                                                                                                      | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/48][Github]]     | C04   |   1 || Sherlock   | RealWagmi           | Dexes                    |        2 | No slippage protection when withdrawing and providing liquidity in rebalanceAll                                                                                                      | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/94][Github]]     | C07-2 |   1 || Sherlock   | RealWagmi           | Dexes                    |       12 | Usage of slot0 is extremely easy to manipulate                                                                                                                                       | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/97][Github]]     | C01   |   1 || Sherlock   | RealWagmi           | Dexes                    |        1 | Deposit transactions lose funds to front-running when multiple fee tiers are available                                                                                               | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/105][Github]]     | C01   |   1 || Sherlock   | RealWagmi           | Dexes                    |        3 | _estimateWithdrawalLp function might return a very large value, result in users losing significant incentives or being unable to withdraw                                            | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/142][Github]]     | C06-3 |   1 || Sherlock   | USSD                | Decentralized Stablecoin |       32 | Price calculation susceptible to flashloan exploits                                                                                                                                  | [[https://github.com/sherlock-audit/2023-05-USSD-judging/issues/451][Github]]     | C01   |   1 || Sherlock   | USSD                | Decentralized Stablecoin |       14 | The getOwnValuation() function contains errors in the price calculation                                                                                                              | [[https://solodit.xyz/issues/h-3-the-getownvaluation-function-contains-errors-in-the-price-calculation-sherlock-none-ussd-autonomous-secure-dollar-git][Github]]     | C06-3 |   1 || Sherlock   | USSD                | Decentralized Stablecoin |        9 | Uniswap v3 pool token balance proportion does not necessarily correspond to the price, and it is easy to manipulate.                                                                 | [[Source: https://github.com/sherlock-audit/2023-05-USSD-judging/issues/808][Github]]     | C06-2 |   1 || Sherlock   | Blueberry           | Yield Agreggator         |        7 | IchiLpOracle is extemely easy to manipulate                                                                                                                                          | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/20][Github]]     | C01   |   1 || Code4Arena | Lybra Finance       | CDP                      |        1 | Making `_totalSupply` and `_totalShares` imbalance significantly by providing fake income leads to stealing fund                                                                     | [[https://code4rena.com/reports/2023-06-lybra][Code4Arena]] | C07-1 |   1 || Code4Arena | Lybra Finance       | CDP                      |        1 | The Constructor Caveat leads to bricking of Configurator contract.                                                                                                                   | [[https://code4rena.com/reports/2023-06-lybra][Code4Arena]] | C03-1 |   1 || Code4Arena | Lybra Finance       | CDP                      |       10 | vulnerability in the `executeFlashloan` function of the `PeUSDMainnet` contract. Hackers can burn other people's eUSD token balance without permission                               | [[https://code4rena.com/reports/2023-06-lybra][Code4Arena]] | C07-4 |   1 || Code4Arena | Lybra Finance       | CDP                      |        2 | doesn't calculate the current borrowing amount for the provider, including the provider's borrowed shares and accumulated fees due to inconsistency in `collateralRatio` calculation | [[https://solodit.xyz/issues/h-02-doesnt-calculate-the-current-borrowing-amount-for-the-provider-including-the-providers-borrowed-shares-and-accumulated-fees-due-to-inconsistency-in-collateralratio-calculation-code4rena-lybra-finance-lybra-finance-git][Solodit]]    | C06-2 |   1 || Code4Arena | Lybra Finance       | CDP                      |       22 | Incorrectly implemented modifiers in `LybraConfigurator.sol` allow any address to call functions that are supposed to be restricted                                                  | [[https://solodit.xyz/issues/h-03-incorrectly-implemented-modifiers-in-lybraconfiguratorsol-allow-any-address-to-call-functions-that-are-supposed-to-be-restricted-code4rena-lybra-finance-lybra-finance-git][Solodit]]    | C05-1 |   1 || Code4Arena | Lybra Finance       | CDP                      |        7 | `EUSD.mint` function wrong assumption of cases when calculated sharesAmount = 0                                                                                                      | [[https://solodit.xyz/issues/h-06-eusdmint-function-wrong-assumption-of-cases-when-calculated-sharesamount-0-code4rena-lybra-finance-lybra-finance-git][Solodit]]    | C06-3 |   1 || Code4Arena | Lybra Finance       | CDP                      |       13 | `_voteSucceeded()` returns true when `againstVotes > forVotes` and vice versa                                                                                                        | [[https://github.com/code-423n4/2023-06-lybra-findings/issues/15][Github]]     | C14   |   1 || Code4Arena | Lybra Finance       | CDP                      |        8 | Governance wrongly calculates _quorumReached()                                                                                                                                       | [[https://github.com/code-423n4/2023-06-lybra-findings/issues/14][Github]]     | C06-3 |   1 || Sherlock   | Ajna                | Lending                  |        1 | Pool's kickWithDeposit misses liquidation debt check                                                                                                                                 | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/82][Github]]     | C10   |   1 || Sherlock   | Ajna                | Lending                  |        1 | kickWithDeposit removes the deposit without HTP pool state check                                                                                                                     | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/86][Github]]     | C10   |   1 || Sherlock   | Ajna                | Lending                  |        1 | moveQuoteToken updates pool state using intermediary LUP, biasing pool's interest rate calculations                                                                                  | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/87][Github]]     | C06-3 |   1 || Sherlock   | Ajna                | Lending                  |        1 | settlement can be called when auction period isn't concluded, allowing HPB depositors to game bad debt settlements                                                                   | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/106][Github]]     | C06-4 |   1 || Sherlock   | Ajna                | Lending                  |        2 | LUP is not recalculated after adding kicking penalty to pool's debt, so kick() updates the pool state with an outdated LUP                                                           | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/107][Github]]     | C06-3 |   1 || Sherlock   | Ajna                | Lending                  |        1 | Debt write off can be prohibited by HPB depositor by continuously allocating settlement blocking dust deposits in the higher buckets                                                 | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/110][Github]]     | C10   |   1 || Sherlock   | Perennial           | Derivatives              |        3 | BalancedVault.sol: loss of funds + global settlement flywheel / user settlement flywheels getting out of sync                                                                        | [[https://github.com/sherlock-audit/2023-05-perennial-judging/issues/45][Github]]     | C03-2 |   1 || Sherlock   | Index               | Indexes                  |        6 | eMode implementation is completely broken                                                                                                                                            | [[https://github.com/sherlock-audit/2023-05-Index-judging/issues/251][Github]]     | C07-1 |   1 || Sherlock   | Index               | Indexes                  |        1 | _calculateMaxBorrowCollateral calculates repay incorrectly and can lead to set token liquidation                                                                                     | [[https://github.com/sherlock-audit/2023-05-Index-judging/issues/254][Github]]     | C06-3 |   1 || Code4Arena | Ondo                | RWA                      |        6 | loss of user funds when completing CASH redemptions                                                                                                                                  | [[https://code4rena.com/reports/2023-01-ondo#h-01-loss-of-user-funds-when-completing-cash-redemptions][Code4Arena]] | C03-1 |   1 || Code4Arena | Maia DAO Ecosystem  | Dexes                    |        7 | Use of `slot0` to get `sqrtPriceLimitX96` can lead to price manipulation.                                                                                                            | [[https://solodit.xyz/issues/h-02-use-of-slot0-to-get-sqrtpricelimitx96-can-lead-to-price-manipulation-code4rena-maia-dao-ecosystem-maia-dao-ecosystem-git][Solodit]]    | C01   |   1 || Sherlock   | Unitas Protocol     | Decentralized stablecoin |        7 | Unitas swap function is vulnerable to Sandwich Attack at oracle price update                                                                                                         | [[https://github.com/sherlock-audit/2023-04-unitasprotocol-judging/issues/67][Github]]     | C01   |   1 || Sherlock   | Iron bank           | Lending                  |        3 | supplyNativeToken will strand ETH in contract if called after ACTION_DEFER_LIQUIDITY_CHECK                                                                                           | [[https://github.com/sherlock-audit/2023-05-ironbank-judging/issues/361][Github]]     | C07-1 |     || Code4Arena | Llama               | DAO                      |        5 | governance result might be incorrect as it counts the wrong approval/disapproval                                                                                                     | [[https://github.com/code-423n4/2023-06-llama-findings/issues/203][Github]]     | C06-3 |   1 || Code4Arena | Llama               | DAO                      |        3 | Anyone can change approval/disapproval threshold for any action using LlamaRelativeQuorum strategy                                                                                   | [[https://github.com/code-423n4/2023-06-llama-findings/issues/62][Github]]     | C05-1 |   1 || Sherlock   | GMX                 | Derivatives              |        1 | MarketUtils.getPoolValueInfo() does not use !maximize when evaluating impactPoolUsd, leading to wrong logic of maximizing or minimizing the pool value.                              | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/160][Github]]     | C06-4 |   1 || Sherlock   | GMX                 | Derivatives              |        3 | Pool amount adjustments for collateral decreases aren't undone if swaps are successful                                                                                               | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/235][Github]]     | C03-1 |   1 || Sherlock   | GMX                 | Derivatives              |        1 | Swaps associated with position orders will use the wrong price                                                                                                                       | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/240][Github]]     | C06-2 |   1 |** Desenvolvimento** Categorias** Dificuldade* Referências#+BEGIN_EXPORT latex\printbibliography#+END_EXPORT