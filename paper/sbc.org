:PROPERTIES:#+TITLE: Uma análise classificatória em bugs encontrados em contratos inteligentes escritos em Solidity entre janeiro e setembro de 2023#+AUTHOR: Ana Julia Bittencourt Fogaça#+OPTIONS: toc:nil#+LANGUAGE: pt-br#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline#+LATEX_CLASS: article#+LATEX_CLASS_OPTIONS: [12pt]#+LATEX_HEADER: \usepackage[utf8]{inputenc}#+LATEX_HEADER: \usepackage{sbc-template}#+LATEX_HEADER: \usepackage{graphicx,url}#+LATEX_HEADER: \address{Universidade do Sul de Santa Catarina (UNISUL)\\ Tubarão - SC - Brasil\\ anajuliabit@gmail.com}#+LATEX_HEADER: \sloppy#+LATEX_HEADER: \usepackage[style=numeric]{biblatex}#+LATEX_HEADER: \addbibresource{references.bib}:END:* Abstract:PROPERTIES::CUSTOM_ID: abstract:END:* Resumo:PROPERTIES::CUSTOM_ID: resumo:END:* IntroduçãoOriginalmente introduzida em 2008 pelo /whitepaper/ do Bitcoin [cite:@nakamotoBitcoinPeertoPeerElectronic], a tecnologia blockchain é reconhecida como uma força disruptiva com potencial para transformar uma variedade de indústrias [cite:@TechnologyTippingPoints]. Suas características distintas, como segurança robusta, transparência e código aberto inerente e rastreabilidade completa, têm impulsionado diversos setores a incorporá-la em operações fundamentais. Até 2023, o mercado de criptomoedas, sendo o uso mais notório da blockchain, excedeu o valor de mercado de um trilhão de dólares [cite:@CryptocurrencyStatistics20232023]. A aplicação da tecnologia blockchain estende-se para além das moedas digitais, impactando setores como o financeiro, gerenciamento de identidades, saúde e até governança eleitoral [cite:@BlockchainAdoptionsMaritime].A inovação do Ethereum, lançada pelo seu /whitepaper/ em 2014, representou um marco na evolução da blockchain. Ao contrário do Bitcoin, concebido como uma moeda eletrônica /peer-to-peer/ [cite:@nakamotoBitcoinPeertoPeerElectronic], o Ethereum apresentou o conceito inovador de "contratos inteligentes" [cite:@EthereumWhitepaper]. Esta funcionalidade ampliou o escopo da blockchain, permitindo sua aplicação em novos domínios. A plataforma Ethereum se destaca pela hospedagem de uma máquina virtual que executa códigos em linguagens /Turing-complete/. No entanto, sendo os contratos inteligentes criados por humanos, eles não estão isentos de falhas. Em um ambiente de código aberto, típico de blockchains como Ethereum, essas falhas podem se tornar alvos atrativos para hackers. Apenas no primeiro trimestre de 2023, ataques à rede Ethereum resultaram no roubo de 320 milhões de dólares [cite:@HereHowMuch]. Para minimizar tais riscos, é prática comum realizar auditorias nos contratos inteligentes antes de seu lançamento em ambiente de produção. As auditorias podem ser privadas, conduzidas por empresas especializadas, ou públicas, através de plataformas como Code4rena [cite:@Code4renaKeepingHigh] e Sherlock [cite:@Sherlock], onde participantes diversos podem identificar vulnerabilidades, sendo recompensados individualmente ou em grupo pela descoberta de bugs.Desde 2020, projetos de blockchain que negligenciaram o processo de auditoria sofreram comprometimentos financeiros da ordem de 3.69 bilhões de dólares, enquanto que projetos auditados reportaram perdas de 1.3 bilhões[cite:@CompetitiveVsPrivate], sugerindo que, embora as auditorias reduzam a probabilidade de ataques bem-sucedidos, ainda há desafios na detecção antecipada de vulnerabilidades. Com a demanda por contratos inteligentes crescendo e uma projeção de aumento anual de 82,2% de 2023 a 2030 [cite:@SmartContractsMarket], é crucial entender e classificar as vulnerabilidades emergentes. Neste estudo, examinamos uma amostra de 145 bugs identificados em 31 competições de auditoria públicas realizadas entre janeiro e setembro de 2023 em duas plataformas de renome, Sherlock [cite:@Sherlock] e Code4rena [cite:@Code4renaKeepingHigh]. Nosso objetivo é elucidar questões fundamentais como a complexidade na detecção de diferentes tipos de bugs, a incidência de categorias específicas de bugs em variados protocolos e a correlação entre vulnerabilidades exploradas por hackers e aquelas identificadas em competições de auditoria.* Revisão bibliográfica** Ethereum BlockchainEthereum, conforme delineado no whitepaper por Vitalik Buterin et al., é umaplataforma descentralizada que permite a construção de aplicações financeiras emcima de uma infraestrutura de blockchain[cite:@EthereumWhitepaper]. A blockchainé um sistema de registro distribuído e imutável que mantém um registro contínuode transações ou dados em blocos ligados por criptografia. Esse design asseguraa integridade e a veracidade dos dados, resistindo a alterações retroativas.** Contratos inteligentesContratos inteligentes são programas que rodam na blockchain do Ethereum,permitindo que as partes cumpram acordos sem a necessidade de um intermediário.Uma vez implantados, os contratos inteligentes não podem ser alterados, o queexige que o código seja verificado para potenciais vulnerabilidades antes dolançamento. Eles são fundamentais para a finança descentralizada e têm bilhõesde dólares em valor atrelados a eles[cite:@JCPFreeFullText].** Ethereum Virtual MachineA Ethereum Virtual Machine (EVM) é o ambiente de execução para contratosinteligentes na Ethereum. Funciona como uma camada global que pode executarcódigo de contrato inteligente em um contextodescentralizado[cite:@woodETHEREUMSECUREDECENTRALISED]. Isso possibilita que osdesenvolvedores criem aplicações que funcionam exatamente conforme programadas,sem qualquer possibilidade de fraude ou interferência de terceiros. A EVM éisolada, significando que o código executado dentro dela não tem acesso aosistema de arquivos da rede, a outros contratos inteligentes, ou a qualquerrecurso externo. Esse isolamento garante um alto nível de segurança noecossistema Ethereum.** SoliditySolidity é uma linguagem de programação de alto nível para a implementação decontratos inteligentes e é fortemente tipada, suporta herança, bibliotecas etipos de usuário complexos[cite:@SoliditySolidity22]. Projetada para se alinharcom a EVM, Solidity facilita o desenvolvimento de contratos inteligentes atravésde uma sintaxe semelhante a JavaScript, tornando-a acessível a um amplo espectrode programadores. Solidity, apesar de ser uma linguagem de alto nível comcaracterísticas robustas, não está isenta de vulnerabilidades. Muitas delasdecorrem de uma desconexão entre a semântica da linguagem e a intuição dosprogramadores, principalmente porque Solidity implementa características delinguagens conhecidas, como JavaScript, de maneiras peculiares. Além disso, alinguagem carece de construções específicas para lidar com aspectos do domíniode blockchain, como a imprevisibilidade na ordem ou no atraso das etapas decomputação registradas publicamente na blockchain[cite:@SolidityVulnerabilities]. Isso ressalta a importância de uma compreensãoaprofundada de Solidity ao desenvolver contratos inteligentes, para mitigar orisco de vulnerabilidades de segurança.** Finanças descentralizadas**** TODO explain DeFi** ERCs* Metodologia e perguntas da pesquisa** Coleta de dadosNas 31 competições de auditoria analisadas, que aconteceram de janeiro a setembro de 2023 nas plataformas Code4rena [cite:@Code4renaKeepingHigh] e Sherlock [cite:@timeMostInterestingWeb32023] foram descobertos 145 bugs de alta severidade. Estas competições, com duração média de sete dias, visam a detecção de bugs críticos antes da implementação definitiva dos contratos inteligentes. O total de recompensas concedidas nestes eventos ultrapassou dois milhões de dólares, com uma média de 150 participantes por evento. Após a fase de submissão, juízes especializados em auditoria de contratos inteligentes, recrutados pela própria comunidade, avaliam a gravidade dos bugs encontrados. Aqueles categorizados como de alta severidade representam ameaças graves, incluindo a possibilidade de roubo ou perda de ativos digitais [cite:@JudgingCriteria].#+tblname: TABLE 1#+description: Informações sobre as competições analisadas. HRF denota para High Risk Findings (bugs com severidade alta), nSLOC denota para número de linhas de código.| Plataforma | Categoria            | Competição                                |  Prêmio | HRF |  nSLOC | Participantes |    Data ||------------+----------------------+-------------------------------------------+---------+-----+--------+---------------+---------|| Code4rena  | DAO                  | [[https://code4rena.com/reports/2023-08-arbitrum][Arbitrum security council election system]] |   90500 |   1 |   2184 |            39 | 2023-09 || Code4rena  | DAO                  | [[https://code4rena.com/reports/2023-06-llama][Llama]]                                     |   60500 |   2 |   2096 |            50 | 2023-07 || Code4rena  | Stablecoin           | [[https://code4rena.com/reports/2023-06-lybra][Lybra finance]]                             |   60500 |   8 |   1762 |           136 | 2023-08 || Code4rena  | Dexes                | [[https://code4rena.com/reports/2023-05-maia][Maia DAO ecosystem]]                        |  300500 |  35 |  10997 |            85 | 2023-05 || Code4rena  | Yield                | [[https://code4rena.com/reports/2023-07-pooltogether#wardens][PoolTogether]]                              |  121650 |   9 |   3324 |           117 | 2023-07 || Code4rena  | Yield                | [[https://code4rena.com/reports/2023-08-pooltogether][PoolTogether v5: part deux]]                |   42000 |   2 |   1001 |            45 | 2023-08 || Sherlock   | Lending              | [[https://audits.sherlock.xyz/contests/75][Ajna update]]                               |   85600 |   6 |   5659 |           155 | 2023-06 || Sherlock   | Yield Agreggator     | [[https://audits.sherlock.xyz/contests/41][Blueberry]]                                 |   72500 |  10 |        |           284 | 2023-02 || Sherlock   | Yield Agreggator     | [[https://audits.sherlock.xyz/contests/104/report][Blueberry Update #3]]                       |   23600 |   5 |   3633 |           183 | 2023-08 || Sherlock   | Opções               | [[https://audits.sherlock.xyz/contests/99][Bond options]]                              |   23600 |   2 |    885 |           153 | 2023-07 || Sherlock   | Empréstimos          | [[https://audits.sherlock.xyz/contests/107][Cooler update]]                             |   17000 |   4 |    512 |           170 | 2023-08 || Sherlock   | Dexes                | [[https://audits.sherlock.xyz/contests/97][GFX labs]]                                  |   20400 |   2 |    716 |           106 | 2023-07 || Sherlock   | Derivativos          | [[https://audits.sherlock.xyz/contests/74][GMX]]                                       |  200000 |   5 |  10571 |           220 | 2023-04 || Sherlock   | Lending              | [[https://audits.sherlock.xyz/contests/84][Iron bank]]                                 |   67400 |   1 |   2241 |           271 | 2023-05 || Sherlock   | Derivativos          | [[https://audits.sherlock.xyz/contests/79][Perennial]]                                 |  122000 |   1 |   4063 |           220 | 2023-05 || Sherlock   | Derivativos          | [[https://audits.sherlock.xyz/contests/106][Perennial v2]]                              |  125200 |   6 |   2494 |           252 | 2023-07 || Sherlock   | Derivativos          | [[https://audits.sherlock.xyz/contests/85][Symmetrical]]                               |   91000 |   8 |   3553 |           233 | 2023-06 || Sherlock   | Derivativos          | [[https://audits.sherlock.xyz/contests/108][Symmetrical Update]]                        |   27600 |   2 |   3921 |            52 | 2023-08 || Sherlock   | Launchpad            | [[https://audits.sherlock.xyz/contests/100][Tokensoft]]                                 |   21400 |   1 |    769 |           221 | 2023-07 || Sherlock   | Stablecoin           | [[https://audits.sherlock.xyz/contests/73][Unitas protocol]]                           |   36400 |   1 |   1433 |           208 | 2023-06 || Code4rena  | RWA                  | [[https://code4rena.com/contests/2023-01-ondo-finance-contest][Ondo finance]]                              |   60500 |   1 |   4365 |            74 | 2023-01 || Sherlock   | Índices              | [[https://audits.sherlock.xyz/contests/81][Index coop]]                                |  130600 |   2 |   4383 |           283 | 2023-05 || Sherlock   | Stablecoin           | [[https://audits.sherlock.xyz/contests/82][USSD]]                                      |   18200 |   3 |    402 |           224 | 2023-05 || Sherlock   | RWA                  | [[https://audits.sherlock.xyz/contests/98][Dinari]]                                    |   16000 |   1 |    575 |           176 | 2023-07 || Sherlock   | Dexes                | [[https://audits.sherlock.xyz/contests/88][RealWagmi]]                                 |   33200 |   5 |   1080 |           203 | 2023-06 || Code4rena  | DAO                  | [[https://code4rena.com/reports/2023-07-nounsdao][Nouns DAO]]                                 |  100000 |   1 |   9098 |            36 | 2023-07 || Sherlock   | Dexes                | [[https://audits.sherlock.xyz/contests/89][DODO v3]]                                   |   57800 |   5 |   2079 |           151 | 2023-06 || Sherlock   | Derivativos          | [[https://audits.sherlock.xyz/contests/72][Hubble Exchange]]                           |   60000 |   3 |   1945 |           148 | 2023-06 || Code4rena  | Stablecoin           | [[https://code4rena.com/contests/2023-06-angle-protocol-invitational][Angle Protocol]]                            |   52500 |   3 |   2276 |             5 | 2023-07 || Code4rena  | Gestores de liquidez | [[https://audits.sherlock.xyz/contests/86][Arrakis]]                                   |   81400 |   2 |   2801 |           247 | 2023-06 || Sherlock   | Dexes                | [[https://audits.sherlock.xyz/contests/95][Unstoppable]]                               |   36400 |   8 |   2035 |           130 | 2023-06 ||------------+----------------------+-------------------------------------------+---------+-----+--------+---------------+---------|| TOTALS     |                      |                                           | 2255950 | 145 | 3095.1 |     157.32258 |         |#+tblfm: @33$4=vsum(@2$4..@-1$4)::@33$5=vsum(@2$5..@-1$5)::@33$6=vmean(@2$6..@-1$6)::@33$7=vmean(@2$7..@-1$7)** Categoria dos protocolosOs protocolos investigados neste estudo são dedicados ao setor de Finanças Descentralizadas (DeFi), abarcando exclusivamente as seguintes subcategorias conforme a classificação proposta por DefiLlama [cite:@DefiLlama]:- Derivativos: Protocolos que disponibilizam ferramentas para operações financeiras alavancadas, possibilitando que os usuários façam previsões e especulações acerca de valores futuros de ativos, amplificando suas projeções de lucro ou prejuízo.- Yield Farming: Protocolos que incentivam a prática de staking ou fornecimento de liquidez por parte dos usuários, oferecendo recompensas por tais atividades.- Agregadores de Yield: Protocolos que otimizam os rendimentos por meio da integração de diversas estratégias de /yield farming/.- Opções: Protocolos que ofertam o direito, embora não a obrigação, de adquirir um ativo por um valor preestabelecido em um momento futuro.- DAOs (Organizações Autônomas Descentralizadas): Entidades organizacionais inovadoras que operam sem centralização, com decisões sendo tomadas de forma coletiva pelos membros.- Launchpads: Protocolos desenvolvidos para lançar novos projetos e criptoativos no mercado.- Índices: Protocolos que rastreiam ou replicam a performance de uma série de ativos interligados.- DEXs (Trocas Descentralizadas): Protocolos que permitem a troca de criptoativos de forma descentralizada.- RWAs (Ativos do Mundo Real): Protocolos relacionados à tokenização de ativos físicos, como imóveis.- Stablecoins: Criptomoedas com valor atrelado a moedas fiduciárias ou outros ativos, buscando manter sua estabilidade por intermédio de mecanismos descentralizados.- Gestores de Liquidez: Protocolos que gerenciam posições de liquidez em formadores de mercado automatizados com liquidez concentrada.- Empréstimos: Protocolos que permitem o empréstimo e a tomada de empréstimos de diversos ativos.** Classificação dos BugsA classificação das vulnerabilidades dos protocolos de Finanças Descentralizadas (DeFi) analisados neste trabalho segue uma taxonomia híbrida, combinando os modelos propostos por Zhang et al. [cite:@zhangDemystifyingExploitableBugs2023a] e as tags de Solodit [cite:@Solodit_contentReport_tagsMd], detalhada da seguinte forma:- O: Fora do Escopo  + Inacessibilidade ao código-fonte do projeto.  + Bugs manifestados em componentes off-chain.  + Contratos inteligentes desenvolvidos em linguagens distintas- C01: Manipulação do Mempool / Vulnerabilidades de Front-Running  + Ataques do tipo sandwich #TODO  + Exploração baseado em /Flash loans/ #TODO- C02: Ataque de Reentrada    Vulnerabilidades de reentrância, resultantes de chamadas externas realizadas antes da conclusão de atualizações de estado internas, possibilitando a um adversário explorar o estado inconsistente.- C03: Atualizações de Estado Errôneas.  Ausência ou incorreção na atualização de estado, tal como uma atualização que não deveria ser efetuada.- C04: Configuração /Hardcoded/  Inserção de valores ou parâmetros estáticos diretamente no código do contrato inteligente, o que pode representar um risco de segurança se houver necessidade de flexibilidade.- C05: Escalada de Privilégios e Problemas de Controle de Acesso.  + Chamada de funções privilegiadas sem restrições adequadas.  + Fundos de usuários que podem ser imobilizados por falhas ou ausência de código de retirada.- C06: Matemática Incorreta / Contabilidade Errônea.  Erros de cálculo decorrentes de implementações matemáticas falhas, conduzindo a resultados imprecisos, incluindo:  + Ordem incorreta de operações.  + Retorno de valores inesperados.  + Utilização de números incorretos para cálculos.  + Erros de contabilidade.  + Underflow/overflow.- C07: Lógica de Negócios Quebrada.  Defeitos na lógica de negócios ou protocolos que, mesmo alinhados à intenção do desenvolvedor, são inerentemente falhos.  + Invocações de funções inesperadas ou omissas  + Condições anômalas de ambiente ou contrato  + Argumentos de função impróprios- C08: Bugs Específicos da Implementação do Contrato.  Bugs que não se enquadram claramente em outras categorias.- C09: Falta de Proteção Contra Replay de Assinatura  + Nonce ausente #TODO  + Colisão de hash.- C10: Verificação Ausente.  Omissão crítica de condições ou validações essenciais no código.- C11: DoS (Negação de Serviço).    Vulnerabilidades que permitem a um atacante comprometer a resposta ou eficiência do contrato. Esta categoria inclui casos que não são bem descritos por outra classe e onde a consequência primária é o encerramento do contrato ou ineficiência operacional.- C12: Validação de Dados    Falhas na verificação ou saneamento de entradas, particularmente daquelas oriundas de fontes externas.- C13: Correspondência de Lista Branca/Lista Negra.  Gerenciamento inadequado de endereços baseado em listas predefinidas.- C14: Arrays.  Vulnerabilidades associadas ao manuseio inadequado de arrays, incluindo:  + Leituras/escritas fora dos limites  + Problemas na exclusão  + Questões relacionadas ao redimensionamento de arrays** Perguntas da pesquisa- Q1: Que tipo de vulnerabilidade é mais difícil de ser encontrada por auditores?- Q2: Que categoria de protocolo apresenta mais presença de bugs?- Q3: Os auditores frequentemente perdem tipos específicos de bugs que são posteriormente explorados?- Q4: Qual é o impacto financeiro médio de diferentes tipos de vulnerabilidades?- Q5: Como a complexidade do contrato inteligente afeta a probabilidade de encontrar bugs?- Q6: Qual a relação entre categoria de bugs e os diferente tipos de protocolos?** Dados coletados*** Dataset :noexport:#+tblname: dataset| Platform  | Protocol            | Protocol Category |  Auditors | Description                                                                                                                                                                                       | Link      | Class ||-----------+---------------------+-------------------+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+-------|| Sherlock  | Perennial V2        | Derivatives       |         4 | Oracle request timestamp and pending position timestamp mismatch can make most position updates invalid                                                                                           | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/42][Github]]    | C03   || Sherlock  | Perennial V2        | Derivatives       |         1 | Invalid oracle versions can cause desync of global and local positions making protocol lose funds and being unable to pay back all users                                                          | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/49][Github]]    | C03   || Sherlock  | Perennial V2        | Derivatives       |         4 | Protocol fee from Market.sol is locked                                                                                                                                                            | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/52][Github]]    | C05   || Sherlock  | Perennial V2        | Derivatives       |         3 | PythOracle:if price.expo is less than 0, wrong prices will be recorded                                                                                                                            | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/56][Github]]    | C06   || Sherlock  | Perennial V2        | Derivatives       |         4 | Vault.sol: settleing the 0 address will disrupt accounting                                                                                                                                        | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/62][Github]]    | C03   || Sherlock  | Perennial V2        | Derivatives       |         1 | Keepers will suffer significant losses due to miss compensation for L1 rollup fees                                                                                                                | [[https://github.com/sherlock-audit/2023-07-perennial-judging/issues/91][Github]]    | C07   || Sherlock  | Blueberry           | Yield Agreggator  |         1 | Stable BPT valuation is incorrect and can be exploited to cause protocol insolvency                                                                                                               | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/97][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         2 | CurveTricryptoOracle incorrectly assumes that WETH is always the last token in the pool which leads to bad LP pricing                                                                             | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/98][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         2 | CurveTricryptoOracle#getPrice contains math error that causes LP to be priced completely wrong                                                                                                    | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/100][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         1 | CVX/AURA distribution calculation is incorrect and will lead to loss of rewards at the end of each cliff                                                                                          | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/240][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         1 | wrong bToken's exchangeRateStored used for calculate ColleteralValue                                                                                                                              | [[https://github.com/sherlock-audit/2023-07-blueberry-judging/issues/117][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         6 | BlueBerryBank#withdrawLend will cause underlying token accounting error if soft/hard vault has withdraw fee                                                                                       | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/33][Github]]    | C03   || Sherlock  | Blueberry           | Yield Agreggator  |        14 | Interest component of underlying amount is not withdrawable using the withdrawLend function. Such amount is permanently locked in the BlueBerryBank contract                                      | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/109][Github]]    | C07   || Sherlock  | Blueberry           | Yield Agreggator  |         1 | Users can be liquidated prematurely because calculation understates value of underlying position                                                                                                  | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/126][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         7 | Liquidator can take all collateral and underlying tokens for a fraction of the correct price                                                                                                      | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/127][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         7 | Users can get around MaxLTV because of lack of strategyId validation                                                                                                                              | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/129][Github]]    | C10   || Sherlock  | Blueberry           | Yield Agreggator  |        14 | LP tokens are not sent back to withdrawing user                                                                                                                                                   | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/151][Github]]    | C07   || Sherlock  | Blueberry           | Yield Agreggator  |         8 | Users who deposit extra funds into their Ichi farming positions will lose all their ICHI rewards                                                                                                  | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/158][Github]]    | C07   || Sherlock  | Blueberry           | Yield Agreggator  |         2 | Too few ICHI v2 farming reward tokens transferred to the user due to incorrect decimal precision                                                                                                  | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/319][Github]]    | C06   || Sherlock  | Blueberry           | Yield Agreggator  |         7 | IchiLpOracle is extemely easy to manipulate due to how IchiVault calculates underlying token balances                                                                                             | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/20][Github]]    | C01   || Sherlock  | Blueberry           | Yield Agreggator  |         3 | Fail to accrue interests on multiple token posi                                                                                                                                                   | [[https://github.com/sherlock-audit/2023-02-blueberry-judging/issues/140][Github]]    | C07   || Code4rena | Arbitrum Foundation | DAO               |         3 | Signatures can be replayed in `castVoteWithReasonAndParamsBySig()` to use up more votes than a user intended                                                                                      | [[https://code4rena.com/reports/2023-08-arbitrum][Code4rena]] | C09   || Code4rena | PoolTogether        | Yield             |         1 | Too many rewards are distributed when a draw is closed                                                                                                                                            | [[https://code4rena.com/reports/2023-08-pooltogether][Code4rena]] | C06   || Code4rena | PoolTogether        | Yield             |        16 | rngComplete function should only be called by rngAuctionRelayer                                                                                                                                   | [[https://code4rena.com/reports/2023-08-pooltogether][Code4rena]] | C05   || Sherlock  | Tokensoft           | Launchpad         |        24 | "Votes" balance can be increased indefinitely in multiple contracts                                                                                                                               | [[https://github.com/sherlock-audit/2023-06-tokensoft-judging/issues/41][Github]]    | C05   || Sherlock  | Bond Options        | Options           |        14 | All funds from Teller contract can be drained because a malicious receiver can call reclaim repeatedly                                                                                            | [[https://github.com/sherlock-audit/2023-06-bond-judging/issues/79][Github]]    | C03   || Sherlock  | Bond Options        | Options           |         4 | All funds can be stolen from FixedStrikeOptionTeller using a token with malicious decimals                                                                                                        | [[https://github.com/sherlock-audit/2023-06-bond-judging/issues/90][Github]]    | C07   || Sherlock  | Symmetrical         | Derivatives       |         2 | liquidatePartyA requires signature which doesn't have nonce, making possible unfair liquidation and loss of funds for all parties                                                                 | [[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/5][Github]]    | C09   || erlock    | Symmetrical         | Derivatives       |         2 | liquidatePositionsPartyA limits partyB loss to partyB allocated balance, which can lead to inflated partyB balance and loss of funds                                                              | [[https://github.com/sherlock-audit/2023-08-symmetrical-judging/issues/6][Github]]    | C03   || Sherlock  | Cooler              | Lending           |         3 | Can steal gOhm by calling Clearinghouse.claimDefaulted on loans not made by Clearinghouse                                                                                                         | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/28][Github]]    | C10   || Sherlock  | Cooler              | Lending           |        10 | At claimDefaulted, the lender may not receive the token because the Unclaimed token is not processed                                                                                              | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/119][Github]]    | C03   || Sherlock  | Cooler              | Lending           |         2 | Clearinghouse doesn't approve the MINTR to handle tokens in his name, which bricks the entire function.                                                                                           | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/176][Github]]    | C07   || Sherlock  | Cooler              | Lending           |        20 | isCoolerCallback can be bypassed                                                                                                                                                                  | [[https://github.com/sherlock-audit/2023-08-cooler-judging/issues/187][Github]]    | C05   || Sherlock  | GFX Labs            | Dexes             |         6 | Lack of segregation between users' assets and collected fees resulting in loss of funds for the users                                                                                             | [[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/48][Github]]    | C07   || Sherlock  | GFX Labs            | Dexes             |         4 | Users' funds could be stolen or locked by malicious or rouge owners                                                                                                                               | [[https://github.com/sherlock-audit/2023-06-gfx-judging/issues/54][Github]]    | C12   || Code4rena | PoolTogether        | Yield             |         2 | A malicious user can steal other user's deposits from Vault.sol                                                                                                                                   | [[https://solodit.xyz/issues/h-02-a-malicious-user-can-steal-other-users-deposits-from-vaultsol-code4rena-pooltogether-pooltogether-git][Solodit]]   | C06   || Code4rena | PoolTogether        | Yield             |         5 | `_amountOut` is representing assets and shares at the same time in the `liquidate` function                                                                                                       | [[https://github.com/code-423n4/2023-07-pooltogether-findings/issues/427][Github]]    | C06   || Code4rena | PoolTogether        | Yield             |        39 | `Vault.mintYieldFee` function can be called by anyone to mint `Vault Shares` to any recipient address                                                                                             | [[https://solodit.xyz/issues/h-04-vaultmintyieldfee-function-can-be-called-by-anyone-to-mint-vault-shares-to-any-recipient-address-code4rena-pooltogether-pooltogether-git][Solidit]]   | C07   || Code4rena | PoolTogether        | Yield             |        10 | Delegated amounts can be forcefully removed from anyone in the `TwabController`                                                                                                                   | [[https://solodit.xyz/issues/h-05-delegated-amounts-can-be-forcefully-removed-from-anyone-in-the-twabcontroller-code4rena-pooltogether-pooltogether-git][Solodit]]   | C07   || Code4rena | PoolTogether        | Yield             |         8 | Resetting delegation will result in user funds being lost forever                                                                                                                                 | [[https://solodit.xyz/issues/h-06-resetting-delegation-will-result-in-user-funds-being-lost-forever-code4rena-pooltogether-pooltogether-git][Solodit]]   | C03   || Code4rena | PoolTogether        | Yield             |         3 | `_requireVaultCollateralized()` is called at the beginning of the functions `mintYieldFee()` and `liquidate()`                                                                                    | [[https://solodit.xyz/issues/h-07--is-called-at-the-beginning-of-the-functions-mintyieldfee-and-liquidate-code4rena-pooltogether-pooltogether-git][Solodit]]   | C07   || Code4rena | PoolTogether        | Yield             |         5 | Increasing reserves breaks ProzePool accounting                                                                                                                                                   | [[https://solodit.xyz/issues/h-08-increasing-reserves-breaks-prizepool-accounting-code4rena-pooltogether-pooltogether-git][Solodit]]   | C03   || Code4rena | PoolTogether        | Yield             |         2 | `Vault` is not compatible with some ERC4626 vaults                                                                                                                                                | [[https://solodit.xyz/issues/h-09-vault-is-not-compatible-with-some-erc4626-vaults-code4rena-pooltogether-pooltogether-git][Solodit]]   | C07   || Code4rena | PoolTogether        | Yield             |         2 | The _currentExchangeRate of the Vault contract can’t increase and will always be lower than or equal to _assetUnit                                                                                | [[https://github.com/code-423n4/2023-07-pooltogether-findings/issues/443][Github]]    | C07   || Sherlock  | Dinari              | RWA               |         4 | Bypass the blacklist restriction because the blacklist check is not done when minting or burning                                                                                                  | [[https://github.com/sherlock-audit/2023-06-dinari-judging/issues/64][Github]]    | C13   || Sherlock  | Unstopabble         | Dexes             |         1 | Wrong accounting of the storage balances results for the protocol to be in debt even when the bad debt is repaid                                                                                  | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/68][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |         1 | reduce_margin_by_amount in Vault.reduce_position is wrongly calculated                                                                                                                            | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/85][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |         7 | Vault: The attacker can sandwich attack himself on swaps in open_position, close_position and reduce_position to make a bad debt                                                                  | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/140][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |         6 | reduce_position doesn’t update margin mapping correctly                                                                                                                                           | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/143][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |         3 | Leverage calculation is wrong                                                                                                                                                                     | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/150][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |        11 | Vault: _update_debt does not accrue interest                                                                                                                                                      | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/167][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |         6 | Adversary manipulate the middle path when calling execute_dca_order, resulting user loss, benefiting the attacker                                                                                 | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/182][Github]]    | O     || Sherlock  | Unstopabble         | Dexes             |         2 | Interested calculated is amplified by multiple of 1000 in _debt_interest_since_last_update                                                                                                        | [[https://github.com/sherlock-audit/2023-06-unstoppable-judging/issues/191][Github]]    | O     || Code4rena | Nouns DAO           | DAO               |         5 | User can steal tokens by using duplicated ERC20 tokens as parameter in `NounsDAOLogicV1Fork.quit`                                                                                                 | [[https://solodit.xyz/issues/h-01-user-can-steal-tokens-by-using-duplicated-erc20-tokens-as-parameter-in-nounsdaologicv1forkquit-code4rena-nouns-dao-nouns-dao-git][Solid]]     | C14   || Sherlock  | Hubble Exchange     | Derivatives       |        11 | ProcessWithdrawals is still DOS-able                                                                                                                                                              | [[https://solodit.xyz/issues/h-1-processwithdrawals-is-still-dos-able-sherlock-none-hubble-exchange-git][Solodit]]   | C11   || Sherlock  | Hubble Exchange     | Derivatives       |        11 | Failed withdrawals from VUSD#processWithdrawals will be lost forever                                                                                                                              | [[https://solodit.xyz/issues/h-2-failed-withdrawals-from-vusdprocesswithdrawals-will-be-lost-forever-sherlock-none-hubble-exchange-git][Solodit]]   | C05   || Sherlock  | Hubble Exchange     | Derivatives       |         1 | Rogue validators can manipulate funding rates and profit unfairly from liquidations                                                                                                               | [[https://solodit.xyz/issues/h-3-rogue-validators-can-manipulate-funding-rates-and-profit-unfairly-from-liquidations-sherlock-none-hubble-exchange-git][Solodit]]   | C08   || Sherlock  | Symmetrical         | Derivatives       |        13 | setSymbolsPrice() can use the priceSig from a long time ago                                                                                                                                       | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/113][Github]]    | C12   || Sherlock  | Symmetrical         | Derivatives       |         1 | liquidatePositionsPartyB can be used by a malicious liquidator to liquidate only select positions which artificially inflates partyA upnl                                                         | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/160][Github]]    | C07   || Sherlock  | Symmetrical         | Derivatives       |         8 | PartyA and PartyB nonce is not incremented in any of the liquidation functions which can lead to all protocol funds being stolen                                                                  | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/190][Github]]    | C09   || Sherlock  | Symmetrical         | Derivatives       |         2 | LibMuon Signature hash collision                                                                                                                                                                  | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/214][Github]]    | C09   || Sherlock  | Symmetrical         | Derivatives       |        13 | depositAndAllocateForPartyB is broken due to incorrect precision                                                                                                                                  | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/222][Github]]    | C06   || Sherlock  | Symmetrical         | Derivatives       |         5 | Accounting error in PartyB's pending locked balance led to loss of funds                                                                                                                          | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/226][Github]]    | C06   || Sherlock  | Symmetrical         | Derivatives       |        17 | Liquidation can be blocked by incrementing the nonce                                                                                                                                              | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/233][Github]]    | C01   || Sherlock  | Symmetrical         | Derivatives       |         6 | Liquidation of PartyA will fail due to underflow errors                                                                                                                                           | [[https://github.com/sherlock-audit/2023-06-symmetrical-judging/issues/241][Github]]    | C06   || Sherlock  | DODO                | Dexes             |         2 | User can perform sandwich attack on withdrawReserves for profit                                                                                                                                   | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/22][Github]]    | C01   || Sherlock  | DODO                | Dexes             |         2 | Calls to liquidate don't write down totalBorrows which breaks exchange rate                                                                                                                       | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/46][Github]]    | C03   || Sherlock  | DODO                | Dexes             |         4 | Anyone can sell other users' tokens as fromToken, and get the toToken's themselves due to decodeData.payer is never checked.                                                                      | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/106][Github]]    | C05   || Sherlock  | DODO                | Dexes             |         4 | A user can get more dTokens than they should get via D3VaultFunding.userDeposit(), due to accounting issues in liquidate()                                                                        | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/211][Github]]    | C03   || Sherlock  | DODO                | Dexes             |        10 | When a D3MM pool repays all of the borrowed funds to vault using repayAll, an attacker can steal double the amount of those funds                                                                 | [[https://github.com/sherlock-audit/2023-06-dodo-judging/issues/217][Github]]    | C06   || Sherlock  | Arrakis             | Liquidity Manager |         2 | Pool deviation check in SimpleManager on rebalance can be bypassed                                                                                                                                | [[https://github.com/sherlock-audit/2023-06-arrakis-judging/issues/26][Github]]    | C07   || Sherlock  | Arrakis             | Liquidity Manager |        13 | ArrakisV2Router#addLiquidityPermit2 will strand ETH                                                                                                                                               | [[https://github.com/sherlock-audit/2023-06-arrakis-judging/issues/183][Github]]    | C07   || Code4rena | Angle Protocol      | Stablecoin        |         2 | Possible reentray during redepmtion/swap                                                                                                                                                          | [[https://code4rena.com/reports/2023-06-angle#h-01-possible-reentrancy-during-redemptionswap][Github]]    | C02   || Code4rena | Angle Protocol      | Stablecoin        |         3 | The first disputer might lose funds although his dispute is valid                                                                                                                                 | [[https://github.com/code-423n4/2023-06-angle-findings/issues/23][Github]]    | C01   || Code4rena | Angle Protocol      | Stablecoin        |         2 | Poor detection of disputed trees allows claiming tokens from a disputed tree                                                                                                                      | [[https://github.com/code-423n4/2023-06-angle-findings/issues/10][Github]]    | C10   || Sherlock  | RealWagmi           | Dexes             |        12 | Wrong calculation of tickCumulatives due to hardcoded pool fees                                                                                                                                   | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/48][Github]]    | C04   || Sherlock  | RealWagmi           | Dexes             |         2 | No slippage protection when withdrawing and providing liquidity in rebalanceAll                                                                                                                   | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/94][Github]]    | C07   || Sherlock  | RealWagmi           | Dexes             |        12 | Usage of slot0 is extremely easy to manipulate                                                                                                                                                    | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/97][Github]]    | C01   || Sherlock  | RealWagmi           | Dexes             |         1 | Deposit transactions lose funds to front-running when multiple fee tiers are available                                                                                                            | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/105][Github]]    | C01   || Sherlock  | RealWagmi           | Dexes             |         3 | _estimateWithdrawalLp function might return a very large value, result in users losing significant incentives or being unable to withdraw                                                         | [[https://github.com/sherlock-audit/2023-06-real-wagmi-judging/issues/142][Github]]    | C06   || Sherlock  | USSD                | Stablecoin        |        32 | Price calculation susceptible to flashloan exploits                                                                                                                                               | [[https://github.com/sherlock-audit/2023-05-USSD-judging/issues/451][Github]]    | C01   || Sherlock  | USSD                | Stablecoin        |        14 | The getOwnValuation() function contains errors in the price calculation                                                                                                                           | [[https://solodit.xyz/issues/h-3-the-getownvaluation-function-contains-errors-in-the-price-calculation-sherlock-none-ussd-autonomous-secure-dollar-git][Github]]    | C06   || Sherlock  | USSD                | Stablecoin        |         9 | Uniswap v3 pool token balance proportion does not necessarily correspond to the price, and it is easy to manipulate.                                                                              | [[Source: https://github.com/sherlock-audit/2023-05-USSD-judging/issues/808][Github]]    | C06   || Code4rena | Lybra Finance       | Stablecoin        |         1 | Making `_totalSupply` and `_totalShares` imbalance significantly by providing fake income leads to stealing fund                                                                                  | [[https://code4rena.com/reports/2023-06-lybra][Code4rena]] | C07   || Code4rena | Lybra Finance       | Stablecoin        |         1 | The Constructor Caveat leads to bricking of Configurator contract.                                                                                                                                | [[https://code4rena.com/reports/2023-06-lybra][Code4rena]] | C03   || Code4rena | Lybra Finance       | Stablecoin        |        10 | vulnerability in the `executeFlashloan` function of the `PeUSDMainnet` contract. Hackers can burn other people's eUSD token balance without permission                                            | [[https://code4rena.com/reports/2023-06-lybra][Code4rena]] | C07   || Code4rena | Lybra Finance       | Stablecoin        |         2 | doesn't calculate the current borrowing amount for the provider, including the provider's borrowed shares and accumulated fees due to inconsistency in `collateralRatio` calculation              | [[https://solodit.xyz/issues/h-02-doesnt-calculate-the-current-borrowing-amount-for-the-provider-including-the-providers-borrowed-shares-and-accumulated-fees-due-to-inconsistency-in-collateralratio-calculation-code4rena-lybra-finance-lybra-finance-git][Solodit]]   | C06   || Code4rena | Lybra Finance       | Stablecoin        |        22 | Incorrectly implemented modifiers in `LybraConfigurator.sol` allow any address to call functions that are supposed to be restricted                                                               | [[https://solodit.xyz/issues/h-03-incorrectly-implemented-modifiers-in-lybraconfiguratorsol-allow-any-address-to-call-functions-that-are-supposed-to-be-restricted-code4rena-lybra-finance-lybra-finance-git][Solodit]]   | C05   || Code4rena | Lybra Finance       | Stablecoin        |         7 | `EUSD.mint` function wrong assumption of cases when calculated sharesAmount = 0                                                                                                                   | [[https://solodit.xyz/issues/h-06-eusdmint-function-wrong-assumption-of-cases-when-calculated-sharesamount-0-code4rena-lybra-finance-lybra-finance-git][Solodit]]   | C06   || Code4rena | Lybra Finance       | Stablecoin        |        13 | `_voteSucceeded()` returns true when `againstVotes > forVotes` and vice versa                                                                                                                     | [[https://github.com/code-423n4/2023-06-lybra-findings/issues/15][Github]]    | C14   || Code4rena | Lybra Finance       | Stablecoin        |         8 | Governance wrongly calculates _quorumReached()                                                                                                                                                    | [[https://github.com/code-423n4/2023-06-lybra-findings/issues/14][Github]]    | C06   || Sherlock  | Ajna                | Lending           |         1 | Pool's kickWithDeposit misses liquidation debt check                                                                                                                                              | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/82][Github]]    | C10   || Sherlock  | Ajna                | Lending           |         1 | kickWithDeposit removes the deposit without HTP pool state check                                                                                                                                  | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/86][Github]]    | C10   || Sherlock  | Ajna                | Lending           |         1 | moveQuoteToken updates pool state using intermediary LUP, biasing pool's interest rate calculations                                                                                               | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/87][Github]]    | C06   || Sherlock  | Ajna                | Lending           |         1 | settlement can be called when auction period isn't concluded, allowing HPB depositors to game bad debt settlements                                                                                | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/106][Github]]    | C06   || Sherlock  | Ajna                | Lending           |         2 | LUP is not recalculated after adding kicking penalty to pool's debt, so kick() updates the pool state with an outdated LUP                                                                        | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/107][Github]]    | C06   || Sherlock  | Ajna                | Lending           |         1 | Debt write off can be prohibited by HPB depositor by continuously allocating settlement blocking dust deposits in the higher buckets                                                              | [[https://github.com/sherlock-audit/2023-04-ajna-judging/issues/110][Github]]    | C10   || Sherlock  | Perennial           | Derivatives       |         3 | BalancedVault.sol: loss of funds + global settlement flywheel / user settlement flywheels getting out of sync                                                                                     | [[https://github.com/sherlock-audit/2023-05-perennial-judging/issues/45][Github]]    | C03   || Sherlock  | Index coop          | Indexes           |         6 | eMode implementation is completely broken                                                                                                                                                         | [[https://github.com/sherlock-audit/2023-05-Index-judging/issues/251][Github]]    | C07   || Sherlock  | Index coop          | Indexes           |         1 | _calculateMaxBorrowCollateral calculates repay incorrectly and can lead to set token liquidation                                                                                                  | [[https://github.com/sherlock-audit/2023-05-Index-judging/issues/254][Github]]    | C06   || Code4rena | Ondo Finance        | RWA               |         6 | loss of user funds when completing CASH redemptions                                                                                                                                               | [[https://code4rena.com/reports/2023-01-ondo#h-01-loss-of-user-funds-when-completing-cash-redemptions][Code4rena]] | C03   || Code4rena | Maia DAO Ecosystem  | Dexes             |         7 | Use of `slot0` to get `sqrtPriceLimitX96` can lead to price manipulation.                                                                                                                         | [[https://solodit.xyz/issues/h-02-use-of-slot0-to-get-sqrtpricelimitx96-can-lead-to-price-manipulation-code4rena-maia-dao-ecosystem-maia-dao-ecosystem-git][Solodit]]   | C01   || Code4rena | Maia DAO Ecosystem  | Dexes             |         7 | if a STRATEGY TOKEN is "Toggled off" STRATEGIES will still be able to withdraw but returning of tokens with replenishReserves will be disabled. #882                                              | [[https://github.com/code-423n4/2023-05-maia-findings/issues/882][Github]]    | C10   || Code4rena | Maia DAO Ecosystem  | Dexes             |         8 | setWeight() Logic error                                                                                                                                                                           | [[https://github.com/code-423n4/2023-05-maia-findings/issues/766][Github]]    | C06   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | MIN_FALLBACK_RESERVE (in BranchBridgeAgent) doesn’t consider the actual gas consumption in AnyCall contracts, which lets the user underpay the actual cost when replenishing the execution budget | [[https://github.com/code-423n4/2023-05-maia-findings/issues/764][Github]]    | C04   || Code4rena | Maia DAO Ecosystem  | Dexes             |        13 | Multiple issues with decimal scaling will cause incorrect accounting of hTokens and underlying tokens                                                                                             | [[https://github.com/code-423n4/2023-05-maia-findings/issues/758][Github]]    | C06   || Code4rena | Maia DAO Ecosystem  | Dexes             |         3 | withdrawProtocolFees() Possible malicious or accidental withdrawal of all rewards                                                                                                                 | [[https://github.com/code-423n4/2023-05-maia-findings/issues/731][Github]]    | C10   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | redeem() beforeRedeem using the wrong owner parameter                                                                                                                                             | [[https://github.com/code-423n4/2023-05-maia-findings/issues/730][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Adversary can call BranchBridgeAgent#retrieveDeposit with an invalid _depositNonce, which would lead to loss of other users' deposit.                                                             | [[https://github.com/code-423n4/2023-05-maia-findings/issues/688][Github]]    | C10   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | RootBridgeAgent->CheckParamsLib#checkParams does not check that _dParams.token is underlying of _dParams.hToken                                                                                   | [[https://github.com/code-423n4/2023-05-maia-findings/issues/687][Github]]    | C12   || Code4rena | Maia DAO Ecosystem  | Dexes             |         3 | TalosBaseStrategy#init() lacks slippage protection                                                                                                                                                | [[https://github.com/code-423n4/2023-05-maia-findings/issues/658][Github]]    | C10   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Attacker can steal Accumulated Awards from RootBridgeAgent by abusing retrySettlement()                                                                                                           | [[https://github.com/code-423n4/2023-05-maia-findings/issues/645][Github]]    | C03   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Attacker can mint arbitrary amount of hToken on RootChain                                                                                                                                         | [[https://github.com/code-423n4/2023-05-maia-findings/issues/643][Github]]    | C12   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Re-adding a deprecated gauge in a new epoch before calling updatePeriod() / queueRewardsForCycle() will leave some gauges without rewards                                                         | [[https://github.com/code-423n4/2023-05-maia-findings/issues/639][Github]]    | C11   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | User underpay for the remote call execution gas on root chain                                                                                                                                     | [[https://github.com/code-423n4/2023-05-maia-findings/issues/612][Github]]    | C06   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | The difference between gasLeft and gasAfterTransfer is greater than TRANSFER_OVERHEAD causing anyExecute to fail always                                                                           | [[https://github.com/code-423n4/2023-05-maia-findings/issues/610][Github]]    | C04   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Overpaying remaining gas to the user or failing anyExecute call due to incorrect gas unit calculation in BranchBridgeAgent                                                                        | [[https://github.com/code-423n4/2023-05-maia-findings/issues/607][Github]]    | C04   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Second per liquidity inside could overflow uint256 causing the LP position to be locked in UniswapV3Staker                                                                                        | [[https://github.com/code-423n4/2023-05-maia-findings/issues/505][Github]]    | C06   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Reentrancy attack possible on RootBridgeAgent.retrySettlement() with missing access control for RootBridgeAgentFactory.createBridgeAgent()                                                        | [[https://github.com/code-423n4/2023-05-maia-findings/issues/492][Github]]    | C02   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Attacker can exploit "deposit" to drain Ulysess Liquidity Pool                                                                                                                                    | [[https://github.com/code-423n4/2023-05-maia-findings/issues/435][Github]]    | C08   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | User can bypass bandwidth limit by repeatedly "balancing" the pool                                                                                                                                | [[https://github.com/code-423n4/2023-05-maia-findings/issues/392][Github]]    | C06   || Code4rena | Maia DAO Ecosystem  | Dexes             |         4 | Missing unwrapping of native token in RootBridgeAgent.sweep() causes fees to be stuck                                                                                                             | [[https://github.com/code-423n4/2023-05-maia-findings/issues/385][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         5 | Multiple issues with retrySettlement() and retrieveDeposit() will cause loss of users' bridging deposits                                                                                          | [[https://github.com/code-423n4/2023-05-maia-findings/issues/356][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Attacker can redeposit gas after "forceRevert()" to freeze all deposited gas budget of Root Bridge Agent                                                                                          | [[https://github.com/code-423n4/2023-05-maia-findings/issues/337][Github]]    | C10   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Malicious user can set any contract as local hToken for an underlying since there is no access control for "_addLocalToken"                                                                       | [[https://github.com/code-423n4/2023-05-maia-findings/issues/285][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |        13 | UlyssesToken asset ID accounting error                                                                                                                                                            | [[https://github.com/code-423n4/2023-05-maia-findings/issues/275][Github]]    | C03   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Accessing the incorrect offset to get the nonce when flag is 0x06 in RootBridgeAgent::anyExecute() will lead to mark as executed incorrect nonces and could potentially cause a DoS               | [[https://github.com/code-423n4/2023-05-maia-findings/issues/267][Github]]    | C11   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Lack of return value handing in ArbitrumBranchBridgeAgent._performCall() could cause users' deposit to be locked in contract                                                                      | [[https://github.com/code-423n4/2023-05-maia-findings/issues/266][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         3 | Removing a BribeFlywheel from a Gauge does not remove the reward asset from the rewards depo, making it impossible to add a new Flywheel with the same reward token                               | [[https://github.com/code-423n4/2023-05-maia-findings/issues/214][Github]]    | C03   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Malicious user can front-run Gauges's addBribeFlywheel to steal bribe rewards                                                                                                                     | [[https://github.com/code-423n4/2023-05-maia-findings/issues/206][Github]]    | C01   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | Incorrect flow of adding liquidity in UlyssesRouter.sol                                                                                                                                           | [[https://github.com/code-423n4/2023-05-maia-findings/issues/201][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         2 | RetrieveDeposit might never be able to Trigger the Fallback function                                                                                                                              | [[https://github.com/code-423n4/2023-05-maia-findings/issues/183][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | Incorrectly reading the offset from the received data parameter to get the depositNonce in the BranchBridgeAgent::anyFallback() function                                                          | [[https://github.com/code-423n4/2023-05-maia-findings/issues/169][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         1 | BaseV2Minter DAO reward shares are calculated wrong                                                                                                                                               | [[https://github.com/code-423n4/2023-05-maia-findings/issues/169][Github]]    | C06   || Code4rena | Maia DAO Ecosystem  | Dexes             |         6 | Cross-chain messaging via Anycall will fail                                                                                                                                                       | [[https://github.com/code-423n4/2023-05-maia-findings/issues/91][Github]]    | C07   || Code4rena | Maia DAO Ecosystem  | Dexes             |         7 | Rerange/rebalance should not use protocolFee as asset for adding liquidity                                                                                                                        | [[https://github.com/code-423n4/2023-05-maia-findings/issues/80][Github]]    | C03   || Sherlock  | Unitas Protocol     | Stablecoin        |         7 | Unitas swap function is vulnerable to Sandwich Attack at oracle price update                                                                                                                      | [[https://github.com/sherlock-audit/2023-04-unitasprotocol-judging/issues/67][Github]]    | C01   || Sherlock  | Iron bank           | Lending           |         3 | supplyNativeToken will strand ETH in contract if called after ACTION_DEFER_LIQUIDITY_CHECK                                                                                                        | [[https://github.com/sherlock-audit/2023-05-ironbank-judging/issues/361][Github]]    | C07   || Code4rena | Llama               | DAO               |         5 | governance result might be incorrect as it counts the wrong approval/disapproval                                                                                                                  | [[https://github.com/code-423n4/2023-06-llama-findings/issues/203][Github]]    | C06   || Code4rena | Llama               | DAO               |         3 | Anyone can change approval/disapproval threshold for any action using LlamaRelativeQuorum strategy                                                                                                | [[https://github.com/code-423n4/2023-06-llama-findings/issues/62][Github]]    | C05   || Sherlock  | GMX                 | Derivatives       |         1 | MarketUtils.getPoolValueInfo() does not use !maximize when evaluating impactPoolUsd, leading to wrong logic of maximizing or minimizing the pool value.                                           | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/160][Github]]    | C06   || Sherlock  | GMX                 | Derivatives       |         3 | Pool amount adjustments for collateral decreases aren't undone if swaps are successful                                                                                                            | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/235][Github]]    | C03   || Sherlock  | GMX                 | Derivatives       |         1 | Swaps associated with position orders will use the wrong price                                                                                                                                    | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/240][Github]]    | C06   || Sherlock  | GMX                 | Derivatives       |         4 | initialCollateralDeltaAmount is incorrectly interpreted as a USD value when calculating estimated remaining collateral                                                                            | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/249][Github]]    | C06   || Sherlock  | GMX                 | Derivatives       |         3 | Limit swap orders can be used to get a free look into the future                                                                                                                                  | [[https://github.com/sherlock-audit/2023-04-gmx-judging/issues/241][Github]]    | C07   ||-----------+---------------------+-------------------+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+-------|| TOTALS    |                     |                   | 5.3310345 |                                                                                                                                                                                                   |           |       |#+TBLFM: @147$4=vmean(@2$4..@-1$4)** Resultados* Referências#+BEGIN_EXPORT latex\printbibliography#+END_EXPORT