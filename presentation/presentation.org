#+Title: Análise de Bugs em Contratos Inteligentes de Blockchains Compatíveis com Ethereum Virtual Machine: Janeiro a Setembro de 2023

#+AUTHOR: Ana Julia Bittencourt Fogaça

* Foco do Artigo
   - Análise de 145 bugs identificados em 31 competições de auditoria pública (Jan-Set 2023) de projetos que rodam na EVM
   - Objetivo: Compreender, classificar e identificar a dificuldade na identificação de vulnerabilidades

* Visão Geral da Tecnologia Blockchain
** Origem
- Surgiu em 2008 com o lançamento do whitepaper do Bitcoin.
- Criado como uma forma de pagamento digital que elimina intermediários, introduzindo o conceito de "moeda descentralizada" para desassociar o dinheiro do controle governamental.
[[file:decentralized_money.png]]
** Principais Características
- Segurança robusta
- Transparência
- Capacidade de rastreamento
- Código aberto
** Impacto
Seu uso em criptomoedas ganhou proeminência, com o valor de mercado excedendo um trilhão de dólares até 2023.
[[file:crypto_mktcap.png]]


* Mudança de Paradigma com o surgimento Ethereum
- Lançado em 2014 por Vitalik Buterin
- Introdução de "contratos inteligentes"
- Ethereum Virtual Machine
    [[file:evm.png]]

* Casos de Uso Atuais
** DEXs (ex: Uniswap)
    [[file:centralized_vs_decentralized_exchange.png]]
** Crédito (ex: Aave)
   [[file:traditional_vs_defi_credit.png]]
** Derivativos (ex: GMX)
Opções, contratos futuros
** CBDC (Central Bank Digital Currency)
   DREX: Brasil  foi um dos primeiros países a utilizar a tecnologia blockchain para criação do seu CBDC

* Casos de Uso Futuro
** Tokenização de Ativos do Mundo Real (RWA)
  Ações, renda fixa, contratos futuros, mercado imobiliário
** Gerenciamento de cadeia de suprimentos
** Identidade
** Saúde
** Governança eleitoral
** Aviação
  Sistema de gerenciamento de reservas, planejamento e otimização de rotas, tráfego aéreo

* Vulnerabilidades de Contratos Inteligentes
   - Criados por humanos portanto suscetíveis a falhas assim como acontece no software tradicional
   - Alvos atraentes para hackers devido a natureza open-source
   - Ataques no primeiro trimestre de 2023: Roubo de 320 milhões de dólares
[[file:2023_incidents.webp]]

* Importância das Auditorias de Contratos Inteligentes
   - Auditorias privadas e públicas
   - Redução nas perdas financeiras para projetos auditados
    [[file:total_loss.webp]]

* Categoria dos projetos
** Derivativos
Protocolos que disponibilizam ferramentas para operações financeiras alavancadas, possibilitando que os usuários façam previsões e especulações acerca de valores futuros de ativos, amplificando suas projeções de lucro ou prejuízo.
** Yield Farming
Protocolos que incentivam a prática de staking ou fornecimento de liquidez por parte dos usuários, oferecendo recompensas por tais atividades.
** Agregadores de Yield
Protocolos que otimizam os rendimentos por meio da integração de diversas estratégias de /yield farming/.
** Opções
Protocolos que ofertam o direito, embora não a obrigação, de adquirir um ativo por um valor preestabelecido em um momento futuro.
** DAOs (Organizações Autônomas Descentralizadas)
Entidades organizacionais inovadoras que operam sem centralização, com decisões sendo tomadas de forma coletiva pelos membros.
** Launchpads
Protocolos desenvolvidos para lançar novos projetos e criptoativos no mercado.
** Índices
Protocolos que rastreiam ou replicam a performance de uma série de ativos interligados.
** DEXs (Corretoras Descentralizadas)
Protocolos que permitem a troca de criptoativos de forma descentralizada.
** RWAs (Ativos do Mundo Real)
Protocolos relacionados à tokenização de ativos físicos, como imóveis.
** Stablecoins
Criptomoedas com valor atrelado a moedas fiduciárias ou outros ativos, buscando manter sua estabilidade por intermédio de mecanismos descentralizados.
** Gestores de Liquidez
Protocolos que gerenciam posições de liquidez em formadores de mercado automatizados com liquidez concentrada.
** Empréstimos
Protocolos que permitem o empréstimo e a tomada de empréstimos de diversos ativos.


* Classificação dos Bugs
- O: Fora do Escopo
- C01: Manipulação do Mempool / Vulnerabilidades de Front-Running
- C02: Ataque de Reentrada. Vulnerabilidades de reentrância, resultantes de
  chamadas externas realizadas antes da conclusão de atualizações de estado
  internas, possibilitando a um adversário explorar o estado inconsistente.
- C03: Atualizações de Estado Errôneas. Ausência ou incorreção na atualização de
  estado, tal como uma atualização que não deveria ser efetuada.
- C04: Configuração /Hardcoded/. Inserção de valores ou parâmetros estáticos
  diretamente no código do contrato inteligente, o que pode representar um risco
  de segurança se houver necessidade de flexibilidade.
- C05: Escalada de Privilégios e Problemas de Controle de Acesso.
- C06: Matemática Incorreta / Contabilidade Errônea. Erros de cálculo
  decorrentes de implementações matemáticas falhas, conduzindo a resultados
  imprecisos, incluindo:
- C07: Lógica de Negócios Quebrada. Defeitos na lógica de negócios ou protocolos
  que, mesmo alinhados à intenção do desenvolvedor, são inerentemente falhos.
- C08: Bugs Específicos da Implementação do Contrato. Bugs que não se enquadram
  claramente em outras categorias.
- C09: Falta de Proteção Contra Replay de Assinatura
- C10: Verificação Ausente. Omissão crítica de condições ou validações
  essenciais no código.
- C11: DoS (Negação de Serviço). Vulnerabilidades que permitem a um atacante
  comprometer a resposta ou eficiência do contrato. Esta categoria inclui casos
  que não são bem descritos por outra classe e onde a consequência primária é o
  encerramento do contrato ou ineficiência operacional.
- C12: Validação de Dados. Falhas na verificação ou saneamento de entradas,
  particularmente daquelas oriundas de fontes externas.
- C13: Correspondência de Lista Branca/Lista Negra. Gerenciamento inadequado de
  endereços baseado em listas predefinidas.
- C14: Arrays. Vulnerabilidades associadas ao manuseio inadequado de arrays

* Competições

[[file:contests.png]]

* Análise
** Média de auditores que identificaram os bugs por classificação
[[file:../results/average_auditors_by_class.png]]

  - C08: Falhas Específicas na Implementação de Contratos
  - C02: Vulnerabilidades de Reentrância
  - C10: Ausência de Verificações
  - C05: Problemas de Controle de Acesso e Escalada de Privilégios (C05)
  - C14: Arrays
  - C01: Manipulação de Mempool / Vulnerabilidades de Front-Running

** Contagem de Bugs por Classificação

[[file:../results/bugs_by_class.png]]

- C06: Erros de Cálculo (Matemática Incorreta/Contabilidade Errônea):
- C07: Lógica de Negócios Quebrada
- C03: Atualizações de Estado Errôneas
- C02: Vulnerabilidades de Reentrância
- C08:  Falhas Específicas na Implementação de Contratos
- C13: Vulnerabilidades como o uso de funções de hash inseguras

** Frequência de Classificações por Categoria de Protocolo

[[file:../results/bugs_by_protocol_category_with_class_as_hue.png]]

- C07: Lógica de negócio quebrada
- C03: Atualizações de Estado Incoprretas
- C05:  Problemas de Controle de Acesso e Escalada de Privilégios
- C06: Erros de Cálculo

** Distribuição Percentual por Categoria de Protoclo
[[file:../results/bugs_by_protocol_category.png]]

* Discussão dos resultados
1. Complexidade na identificação de vulnerabilidades em contratos inteligentes.
2. Foco na verificação de lógica matemática
3. Vulnerabilidades na lógica de negócios e atualizações do Estado
4. Difierentes perfis de vulnerabilidade em diferentes protocolos

* Recomendações e estudos futuros
1. Adoção de práticas rigorosas de teste e validação.
2. Importância de ferramentas de análise sofisticadas e educação contínua para desenvolvedores e auditores.
3. Recomendação para uso de inteligência artificial e aprendizado de máquina em detecção e análise de vulnerabilidades.
4. Desenvolvimento de benchmarks e frameworks padronizados para segurança em contratos inteligentes.

* https://github.com/anajuliabit/web3_bug_contests_analyze_2023
